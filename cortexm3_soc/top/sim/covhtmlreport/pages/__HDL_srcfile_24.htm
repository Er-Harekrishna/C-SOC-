
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_master_checker.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a>`ifndef AHB_MASTER_CHECKER
<a name="9"><q-n>     9  </q-n></a>`<q-a>define</q-w> AHB_MASTER_CHECKER
<a name="10"><q-n>     10  </q-n></a> 
<a name="11"><q-n>     11  </q-n></a><q-w>class</q-w> ahb_mas_checker <q-w>extends</q-w> uvm_component;
<a name="12"><q-n>     12  </q-n></a>
<a name="13"><q-n>     13  </q-n></a>  <q-m>/** factory registration */</q-m>
<a name="14"><q-n>     14  </q-n></a>  `uvm_component_utils(ahb_mas_checker)
<a name="15"><q-n>     15  </q-n></a> 
<a name="16"><q-n>     16  </q-n></a>  <q-m>/** chk_trans_q and res for transaction checking */</q-m>
<a name="17"><q-n>     17  </q-n></a>  ahb_mas_trans chk_trans_q[$],res[$];
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>  <q-m>/** beat_count - indicates the number of transfers required in burst */</q-m>
<a name="20"><q-n>     20  </q-n></a>  <q-w>int</q-w> beat_count;
<a name="21"><q-n>     21  </q-n></a>
<a name="22"><q-n>     22  </q-n></a>  <q-m>/** trans_count - indicates the number of transfer is going in burst */</q-m>
<a name="23"><q-n>     23  </q-n></a>  <q-w>int</q-w> trans_count;
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>  <q-m>/** no_of_bytes - indicates the number of bytes in burst */</q-m>
<a name="26"><q-n>     26  </q-n></a>  <q-w>int</q-w> no_of_bytes;
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>  <q-m>/** addr_boundary - indicates the address boundary of the burst */</q-m>
<a name="29"><q-n>     29  </q-n></a>  <q-w>int</q-w> addr_boundary;
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>  <q-m>/** lower_boundary - indicates the lower address boundary for wrapping bursts */</q-m>
<a name="32"><q-n>     32  </q-n></a>  <q-w>int</q-w> lower_boundary;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>  <q-m>/** higher_boundary - indicates the higher address boundary for wrapping burst */</q-m>
<a name="35"><q-n>     35  </q-n></a>  <q-w>int</q-w> higher_boundary; 
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>  <q-m>/** error_detect - bit indicat the error is detected in trasaction */</q-m>
<a name="38"><q-n>     38  </q-n></a>  <q-w>bit</q-w> error_detect;
<a name="39"><q-n>     39  </q-n></a>  
<a name="40"><q-n>     40  </q-n></a>  <q-m>/** virtual interface handle */</q-m>
<a name="41"><q-n>     41  </q-n></a>  <q-w>virtual</q-w> ahb_mas_inf vif;
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>  <q-m>/** mas_ai_ch - analysis import for the receiving data from the monitor for checker */</q-m>
<a name="44"><q-n>     44  </q-n></a>  uvm_analysis_imp #(ahb_mas_trans,ahb_mas_checker) mas_ai_ch;
<a name="45"><q-n>     45  </q-n></a>  
<a name="46"><q-n>     46  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="47"><q-n>     47  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_mas_checker"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a>  <q-m>/** build phase */</q-m>
<a name="50"><q-n>     50  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>  <q-m>/** run phase */</q-m>
<a name="53"><q-n>     53  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>  <q-m>/** write method for getting trasaction from analysis port */</q-m>
<a name="56"><q-n>     56  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> write(ahb_mas_trans mas_trans_h);
<a name="57"><q-n>     57  </q-n></a>
<a name="58"><q-n>     58  </q-n></a>  <q-m>/** Checkers */</q-m>
<a name="59"><q-n>     59  </q-n></a>  
<a name="60"><q-n>     60  </q-n></a>  <q-m>/** Checks That First Transfer Type Of The Burst Must Be NONSEQ Type */</q-m>
<a name="61"><q-n>     61  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> first_trans_not_nonseq_check(ahb_mas_trans mas_trans_h);
<a name="62"><q-n>     62  </q-n></a>  
<a name="63"><q-n>     63  </q-n></a>  <q-m>/** Checks During Fixed Burst After First Trnasfer NONSEQ Transfer Type Is Invalid */</q-m>
<a name="64"><q-n>     64  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> during_burst_invalid_nonseq_check(ahb_mas_trans mas_trans_h);
<a name="65"><q-n>     65  </q-n></a>  
<a name="66"><q-n>     66  </q-n></a>  <q-m>/** Checks During Fixed Burst After First Transfer IDLE Transfer Type IS Invalid */</q-m>
<a name="67"><q-n>     67  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> during_burst_invalid_idle_check(ahb_mas_trans mas_trans_h);
<a name="68"><q-n>     68  </q-n></a>  
<a name="69"><q-n>     69  </q-n></a>  <q-m>/** Checks The Address Increment As Per The Transfer Size*/</q-m>
<a name="70"><q-n>     70  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> addr_incr_check(ahb_mas_trans mas_trans_h);
<a name="71"><q-n>     71  </q-n></a>  
<a name="72"><q-n>     72  </q-n></a>  <q-m>/** Checks That HBURST Must Be Stable During Burst */</q-m>
<a name="73"><q-n>     73  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> hburst_stable_during_burst_check(ahb_mas_trans mas_trans_h);
<a name="74"><q-n>     74  </q-n></a>  
<a name="75"><q-n>     75  </q-n></a>  <q-m>/** Checks That Burst Must Not Cross The Boundary Limit */</q-m>
<a name="76"><q-n>     76  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> one_k_boundry_cross_check(ahb_mas_trans mas_trans_h);
<a name="77"><q-n>     77  </q-n></a>  
<a name="78"><q-n>     78  </q-n></a>  <q-m>/** Checks In SINGLE Burst SEQ and BUSY Transfer Type Is Invalid  */</q-m>
<a name="79"><q-n>     79  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> seq_busy_in_single_burst_check(ahb_mas_trans mas_trans_h);
<a name="80"><q-n>     80  </q-n></a>  
<a name="81"><q-n>     81  </q-n></a>  <q-m>/** Checks That Transfer Size Must Be Greater Than Data Width */</q-m>
<a name="82"><q-n>     82  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> size_greater_than_data_width_check(ahb_mas_trans mas_trans_h);
<a name="83"><q-n>     83  </q-n></a>  
<a name="84"><q-n>     84  </q-n></a>  <q-m>/** Checks That HSIZE Must Be Stable During Burst */</q-m>
<a name="85"><q-n>     85  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> hsize_stable_during_burst_check(ahb_mas_trans mas_trans_h);
<a name="86"><q-n>     86  </q-n></a>  
<a name="87"><q-n>     87  </q-n></a>  <q-m>/** Checks Error Response Must Be Two Cycles With Second Cycle Hready As Low */</q-m>
<a name="88"><q-n>     88  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> two_cycle_error_check(ahb_mas_trans mas_trans_h);
<a name="89"><q-n>     89  </q-n></a>  
<a name="90"><q-n>     90  </q-n></a>  <q-m>/** ignored_transaction - For Transaction Ordering, Terminated and Completed Burst Are Handled Vie This Method */</q-m>
<a name="91"><q-n>     91  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> ignored_transection(ahb_mas_trans mas_trans_h);
<a name="92"><q-n>     92  </q-n></a>    
<a name="93"><q-n>     93  </q-n></a><q-w>endclass</q-w> : ahb_mas_checker
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="96"><q-n>     96  </q-n></a><q-m>//methods</q-m>
<a name="97"><q-n>     97  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a><q-m>/** class constructor */</q-m>
<a name="100"><q-n>     100  </q-n></a><q-w>function</q-w> ahb_mas_checker::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_mas_checker"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="101"><q-n>     101  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="102"><q-n>     102  </q-n></a>  <q-m>/** master checker analysis import */</q-m>
<a name="103"><q-n>     103  </q-n></a>  mas_ai_ch = <q-w>new</q-w>(<q-l>"mas_ai_ch"</q-l>,<q-w>this</q-w>);
<a name="104"><q-n>     104  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="105"><q-n>     105  </q-n></a>
<a name="106"><q-n>     106  </q-n></a><q-m>/** build_phase */</q-m>
<a name="107"><q-n>     107  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::build_phase(uvm_phase phase);
<a name="108"><q-n>     108  </q-n></a>  <q-w>if</q-w>(!uvm_config_db #(<q-w>virtual</q-w> ahb_mas_inf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"mas_vif"</q-l>,vif))
<a name="109"><q-n>     109  </q-n></a>    `uvm_fatal(get_full_name(),<q-l>"Not Able To Get The Interface!!!"</q-l>)
<a name="110"><q-n>     110  </q-n></a><q-w>endfunction</q-w> : build_phase
<a name="111"><q-n>     111  </q-n></a>
<a name="112"><q-n>     112  </q-n></a><q-m>/** run phase */</q-m>
<a name="113"><q-n>     113  </q-n></a><q-w>task</q-w> ahb_mas_checker::run_phase(uvm_phase phase);
<a name="114"><q-n>     114  </q-n></a>  <q-w>forever</q-w> <q-w>begin</q-w>
<a name="115"><q-n>     115  </q-n></a>    @(<q-a>negedge</q-w> vif.hresetn)
<a name="116"><q-n>     116  </q-n></a>    chk_trans_q.delete();
<a name="117"><q-n>     117  </q-n></a>    res.delete();
<a name="118"><q-n>     118  </q-n></a>    trans_count = 0;
<a name="119"><q-n>     119  </q-n></a>    error_detect = 0;
<a name="120"><q-n>     120  </q-n></a>  <q-w>end</q-w>
<a name="121"><q-n>     121  </q-n></a><q-w>endtask</q-w> : run_phase
<a name="122"><q-n>     122  </q-n></a>
<a name="123"><q-n>     123  </q-n></a><q-m>/** write method */</q-m>
<a name="124"><q-n>     124  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::write(ahb_mas_trans mas_trans_h);
<a name="125"><q-n>     125  </q-n></a>
<a name="126"><q-n>     126  </q-n></a>  `uvm_info(<q-l>"MASTER CHECKER"</q-l>,<q-l>"THIS IS CHECKER RECEIVED TRANSECTION"</q-l>,UVM_MEDIUM)
<a name="127"><q-n>     127  </q-n></a>  mas_trans_h.print();
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>  chk_trans_q.push_back(mas_trans_h);
<a name="130"><q-n>     130  </q-n></a>  <q-w>if</q-w>(mas_trans_h.HREADY)
<a name="131"><q-n>     131  </q-n></a>    res.push_back(mas_trans_h);
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>  <q-w>case</q-w> (mas_trans_h.hburst_type)
<a name="134"><q-n>     134  </q-n></a>
<a name="135"><q-n>     135  </q-n></a>    hburst_enum'(SINGLE)  : beat_count = 1;
<a name="136"><q-n>     136  </q-n></a>    hburst_enum'(WRAP4)   : beat_count = 4;
<a name="137"><q-n>     137  </q-n></a>    hburst_enum'(INCR4)   : beat_count = 4;
<a name="138"><q-n>     138  </q-n></a>    hburst_enum'(WRAP8)   : beat_count = 8;
<a name="139"><q-n>     139  </q-n></a>    hburst_enum'(INCR8)   : beat_count = 8;
<a name="140"><q-n>     140  </q-n></a>    hburst_enum'(WRAP16)  : beat_count = 16;
<a name="141"><q-n>     141  </q-n></a>    hburst_enum'(INCR16)  : beat_count = 16;
<a name="142"><q-n>     142  </q-n></a>
<a name="143"><q-n>     143  </q-n></a>  <q-w>endcase</q-w>
<a name="144"><q-n>     144  </q-n></a>  
<a name="145"><q-n>     145  </q-n></a>  `uvm_info(get_type_name(),$sformatf(<q-l>"size of check trans q = %0d | res = %0d"</q-l>,chk_trans_q.size(),res.size()),UVM_MEDIUM)
<a name="146"><q-n>     146  </q-n></a>
<a name="147"><q-n>     147  </q-n></a>  <q-w>if</q-w>((mas_trans_h.htrans_type[0]==NONSEQ || mas_trans_h.htrans_type[0]==SEQ) &amp;&amp; mas_trans_h.HREADY)
<a name="148"><q-n>     148  </q-n></a>    trans_count++; 
<a name="149"><q-n>     149  </q-n></a> 
<a name="150"><q-n>     150  </q-n></a>  two_cycle_error_check(mas_trans_h);
<a name="151"><q-n>     151  </q-n></a>  ignored_transection(mas_trans_h);
<a name="152"><q-n>     152  </q-n></a>  addr_incr_check(mas_trans_h);
<a name="153"><q-n>     153  </q-n></a>  during_burst_invalid_nonseq_check(mas_trans_h);
<a name="154"><q-n>     154  </q-n></a>  during_burst_invalid_idle_check(mas_trans_h);
<a name="155"><q-n>     155  </q-n></a>  first_trans_not_nonseq_check(mas_trans_h);
<a name="156"><q-n>     156  </q-n></a>  one_k_boundry_cross_check(mas_trans_h);
<a name="157"><q-n>     157  </q-n></a>  seq_busy_in_single_burst_check(mas_trans_h);
<a name="158"><q-n>     158  </q-n></a>  size_greater_than_data_width_check(mas_trans_h);
<a name="159"><q-n>     159  </q-n></a>  hburst_stable_during_burst_check(mas_trans_h);
<a name="160"><q-n>     160  </q-n></a>  hsize_stable_during_burst_check(mas_trans_h);
<a name="161"><q-n>     161  </q-n></a>   
<a name="162"><q-n>     162  </q-n></a><q-w>endfunction</q-w> : write
<a name="163"><q-n>     163  </q-n></a>  
<a name="164"><q-n>     164  </q-n></a><q-m>/** Checkes That First trans type of the burst must be NONSEQ*/</q-m>
<a name="165"><q-n>     165  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::first_trans_not_nonseq_check(ahb_mas_trans mas_trans_h);
<a name="166"><q-n>     166  </q-n></a> 
<a name="167"><q-n>     167  </q-n></a>  <q-w>if</q-w>(res.size()!=0) <q-w>begin</q-w>
<a name="168"><q-n>     168  </q-n></a>    <q-w>if</q-w>(res[0].htrans_type[0]!=NONSEQ &amp;&amp; res[0].hresp_type!=ERROR) <q-w>begin</q-w>	
<a name="169"><q-n>     169  </q-n></a>      `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"First Transection Of The Burst Should Be NONSEQ"</q-l>)
<a name="170"><q-n>     170  </q-n></a>    <q-w>end</q-w>
<a name="171"><q-n>     171  </q-n></a>  <q-w>end</q-w>
<a name="172"><q-n>     172  </q-n></a>  
<a name="173"><q-n>     173  </q-n></a><q-w>endfunction</q-w> : first_trans_not_nonseq_check
<a name="174"><q-n>     174  </q-n></a>  
<a name="175"><q-n>     175  </q-n></a><q-m>/** Checkes That During Single or Fixed Length Burst Transfer Inbetween NONSEQ Trans type is not allowed  */</q-m>
<a name="176"><q-n>     176  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::during_burst_invalid_nonseq_check(ahb_mas_trans mas_trans_h);
<a name="177"><q-n>     177  </q-n></a>
<a name="178"><q-n>     178  </q-n></a>  <q-w>if</q-w>(mas_trans_h.htrans_type[0]==NONSEQ &amp;&amp; trans_count!=beat_count &amp;&amp; mas_trans_h.hburst_type!=INCR &amp;&amp; res.size()&gt;1 &amp;&amp; mas_trans_h.hresp_type!=ERROR) <q-w>begin</q-w>
<a name="179"><q-n>     179  </q-n></a>    chk_trans_q.delete();
<a name="180"><q-n>     180  </q-n></a>    res.delete();
<a name="181"><q-n>     181  </q-n></a>    trans_count = 0;
<a name="182"><q-n>     182  </q-n></a>    error_detect = 0;
<a name="183"><q-n>     183  </q-n></a>    `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"In The Single and Fixed burst NONSEQ Transfer In Between Burst Is Not Possible"</q-l>)
<a name="184"><q-n>     184  </q-n></a>  <q-w>end</q-w>
<a name="185"><q-n>     185  </q-n></a>
<a name="186"><q-n>     186  </q-n></a><q-w>endfunction</q-w> : during_burst_invalid_nonseq_check	
<a name="187"><q-n>     187  </q-n></a>  
<a name="188"><q-n>     188  </q-n></a><q-m>/** In Fixed Burst Transfer IDLE Transfer Is Not Allowed In Between*/</q-m>
<a name="189"><q-n>     189  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::during_burst_invalid_idle_check(ahb_mas_trans mas_trans_h);
<a name="190"><q-n>     190  </q-n></a>
<a name="191"><q-n>     191  </q-n></a>  <q-w>if</q-w>(mas_trans_h.htrans_type[0]==IDLE &amp;&amp; trans_count!=beat_count &amp;&amp; mas_trans_h.hburst_type!=INCR &amp;&amp; res.size()&gt;1 &amp;&amp; mas_trans_h.hresp_type!=ERROR) <q-w>begin</q-w>
<a name="192"><q-n>     192  </q-n></a>    chk_trans_q.delete();
<a name="193"><q-n>     193  </q-n></a>    res.delete();
<a name="194"><q-n>     194  </q-n></a>    trans_count = 0;
<a name="195"><q-n>     195  </q-n></a>    error_detect = 0;
<a name="196"><q-n>     196  </q-n></a>    `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"In The Single And Fixed Burst IDLE Transfer In Between Burst Is Not Possible"</q-l>)
<a name="197"><q-n>     197  </q-n></a>  <q-w>end</q-w>
<a name="198"><q-n>     198  </q-n></a>
<a name="199"><q-n>     199  </q-n></a><q-w>endfunction</q-w> : during_burst_invalid_idle_check
<a name="200"><q-n>     200  </q-n></a>
<a name="201"><q-n>     201  </q-n></a><q-m>/** It Checks That Burst Address Are Increments As Per The Transfer Size - In incrementing </q-m>
<a name="202"><q-n>     202  </q-n></a><q-m> *  and warping burst address increments with size but in warping  burst addr wraps at </q-m>
<a name="203"><q-n>     203  </q-n></a><q-m> *  address boundary</q-m>
<a name="204"><q-n>     204  </q-n></a><q-m> */</q-m>
<a name="205"><q-n>     205  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::addr_incr_check(ahb_mas_trans mas_trans_h);
<a name="206"><q-n>     206  </q-n></a>  
<a name="207"><q-n>     207  </q-n></a>  <q-w>if</q-w>(res.size()!=0) <q-w>begin</q-w>
<a name="208"><q-n>     208  </q-n></a>    addr_boundary = beat_count*(2**res[0].hsize_type);
<a name="209"><q-n>     209  </q-n></a>    no_of_bytes     = beat_count*(2**res[0].hsize_type);
<a name="210"><q-n>     210  </q-n></a>    lower_boundary  = (<q-w>int</q-w>'(res[0].HADDR/no_of_bytes))*no_of_bytes;
<a name="211"><q-n>     211  </q-n></a>    higher_boundary = lower_boundary + addr_boundary;
<a name="212"><q-n>     212  </q-n></a>    
<a name="213"><q-n>     213  </q-n></a>    <q-w>foreach</q-w>(res[i]) <q-w>begin</q-w>	   
<a name="214"><q-n>     214  </q-n></a>      <q-w>if</q-w>(i&gt;0) <q-w>begin</q-w>
<a name="215"><q-n>     215  </q-n></a>        <q-w>if</q-w>(res[0].hburst_type==WRAP4 || res[0].hburst_type==WRAP8 || res[0].hburst_type==WRAP16) <q-w>begin</q-w>	    
<a name="216"><q-n>     216  </q-n></a>  	  <q-w>if</q-w>(res[i].HADDR&lt;higher_boundary) <q-w>begin</q-w>
<a name="217"><q-n>     217  </q-n></a>	    <q-w>if</q-w>(res[i].HADDR-res[i-1].HADDR!=(2**res[0].hsize_type) &amp;&amp; res[i-1].htrans_type[0]!=BUSY)<q-w>begin</q-w>
<a name="218"><q-n>     218  </q-n></a>	      <q-w>if</q-w>(res[i].HADDR != lower_boundary) 
<a name="219"><q-n>     219  </q-n></a>                `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Address Incrementing In Wraping Burst Is Not Correct"</q-l>) 
<a name="220"><q-n>     220  </q-n></a>	    <q-w>end</q-w>
<a name="221"><q-n>     221  </q-n></a>          <q-w>end</q-w>
<a name="222"><q-n>     222  </q-n></a>  	  <q-w>else</q-w> <q-w>if</q-w>(res[i].HADDR&gt;=higher_boundary &amp;&amp; res[i-1].htrans_type[0]!=BUSY)
<a name="223"><q-n>     223  </q-n></a>            `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Address Incrementing In Wraping Burst Is Not Correct"</q-l>)         
<a name="224"><q-n>     224  </q-n></a>        <q-w>end</q-w>  
<a name="225"><q-n>     225  </q-n></a>        <q-w>if</q-w>(res[0].hburst_type==INCR || res[0].hburst_type==INCR4 || res[0].hburst_type==INCR8 || res[0].hburst_type==INCR16) <q-w>begin</q-w>
<a name="226"><q-n>     226  </q-n></a>          <q-w>if</q-w>((res[i].HADDR - res[i-1].HADDR)!=(2**res[0].hsize_type) &amp;&amp; res[i-1].htrans_type[0]!=BUSY)
<a name="227"><q-n>     227  </q-n></a>            `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Address Incrementing In Wraping Burst Is Not Correct"</q-l>)           
<a name="228"><q-n>     228  </q-n></a>        <q-w>end</q-w>	      	
<a name="229"><q-n>     229  </q-n></a>      <q-w>end</q-w>	    
<a name="230"><q-n>     230  </q-n></a>    <q-w>end</q-w>
<a name="231"><q-n>     231  </q-n></a>  <q-w>end</q-w>  
<a name="232"><q-n>     232  </q-n></a>
<a name="233"><q-n>     233  </q-n></a><q-w>endfunction</q-w> : addr_incr_check	
<a name="234"><q-n>     234  </q-n></a>
<a name="235"><q-n>     235  </q-n></a><q-m>/** It Checks The Address Must Not Cross The Boundary Limit */</q-m>
<a name="236"><q-n>     236  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::one_k_boundry_cross_check(ahb_mas_trans mas_trans_h);
<a name="237"><q-n>     237  </q-n></a>  <q-w>if</q-w>(mas_trans_h.HADDR&gt;32'hffff_fc00 &amp;&amp; mas_trans_h.htrans_type[0]!=IDLE)
<a name="238"><q-n>     238  </q-n></a>    `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Address Crossed The Boundary Limit"</q-l>)
<a name="239"><q-n>     239  </q-n></a><q-w>endfunction</q-w> :one_k_boundry_cross_check
<a name="240"><q-n>     240  </q-n></a>
<a name="241"><q-n>     241  </q-n></a><q-m>/** It Checks That The Single Burst Should Not Contain BUSY and SEQ Transfer Types */</q-m>
<a name="242"><q-n>     242  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::seq_busy_in_single_burst_check(ahb_mas_trans mas_trans_h);
<a name="243"><q-n>     243  </q-n></a>	
<a name="244"><q-n>     244  </q-n></a>  <q-w>if</q-w>(mas_trans_h.hburst_type==SINGLE) <q-w>begin</q-w>
<a name="245"><q-n>     245  </q-n></a>    <q-w>if</q-w>(mas_trans_h.htrans_type[0]==BUSY || mas_trans_h.htrans_type[0]==SEQ)
<a name="246"><q-n>     246  </q-n></a>      `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"In Single Trnasfer BUSY And SEQ Transfer Is Invalid "</q-l>)
<a name="247"><q-n>     247  </q-n></a>  <q-w>end</q-w>	    
<a name="248"><q-n>     248  </q-n></a>
<a name="249"><q-n>     249  </q-n></a><q-w>endfunction</q-w> : seq_busy_in_single_burst_check
<a name="250"><q-n>     250  </q-n></a>
<a name="251"><q-n>     251  </q-n></a><q-m>/** Checks That The Size Of The Transfer Must Not Be The Greater Than The Data Width */</q-m>
<a name="252"><q-n>     252  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::size_greater_than_data_width_check(ahb_mas_trans mas_trans_h);
<a name="253"><q-n>     253  </q-n></a>		        
<a name="254"><q-n>     254  </q-n></a>  <q-w>if</q-w>(mas_trans_h.hsize_type&gt;(`DATA_WIDTH))	
<a name="255"><q-n>     255  </q-n></a>    `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Size Of The Transfer Must Not Be Greater Than The Data Width"</q-l>)	
<a name="256"><q-n>     256  </q-n></a>
<a name="257"><q-n>     257  </q-n></a><q-w>endfunction</q-w> : size_greater_than_data_width_check
<a name="258"><q-n>     258  </q-n></a>			      
<a name="259"><q-n>     259  </q-n></a><q-m>/** Checks That HBURST should be constant Over The Whole Burst */</q-m>
<a name="260"><q-n>     260  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::hburst_stable_during_burst_check(ahb_mas_trans mas_trans_h);
<a name="261"><q-n>     261  </q-n></a>
<a name="262"><q-n>     262  </q-n></a>  <q-w>if</q-w>(chk_trans_q.size()&gt;=2) <q-w>begin</q-w>
<a name="263"><q-n>     263  </q-n></a>    <q-w>if</q-w>((mas_trans_h.hburst_type != chk_trans_q[0].hburst_type)) <q-w>begin</q-w>
<a name="264"><q-n>     264  </q-n></a>      `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>" HBURST Should Be Constant Throughtout The Burst"</q-l>) 
<a name="265"><q-n>     265  </q-n></a>    <q-w>end</q-w>	 
<a name="266"><q-n>     266  </q-n></a>    <q-w>else</q-w> <q-w>begin</q-w>
<a name="267"><q-n>     267  </q-n></a>      <q-w>for</q-w>(<q-w>int</q-w> i=2;i&lt;chk_trans_q.size();i++) <q-w>begin</q-w>
<a name="268"><q-n>     268  </q-n></a>        <q-w>if</q-w>((mas_trans_h.hburst_type != chk_trans_q[chk_trans_q.size()-i].hburst_type))
<a name="269"><q-n>     269  </q-n></a>          error_detect=1;      
<a name="270"><q-n>     270  </q-n></a>      <q-w>end</q-w>	  
<a name="271"><q-n>     271  </q-n></a>      <q-w>if</q-w>(error_detect) <q-w>begin</q-w>
<a name="272"><q-n>     272  </q-n></a>	error_detect=0;
<a name="273"><q-n>     273  </q-n></a>        `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"HBURST Should Be Constant Throughout The Burst"</q-l>) 
<a name="274"><q-n>     274  </q-n></a>      <q-w>end</q-w>
<a name="275"><q-n>     275  </q-n></a>    <q-w>end</q-w>
<a name="276"><q-n>     276  </q-n></a>  <q-w>end</q-w>
<a name="277"><q-n>     277  </q-n></a>
<a name="278"><q-n>     278  </q-n></a><q-w>endfunction</q-w> :hburst_stable_during_burst_check
<a name="279"><q-n>     279  </q-n></a>
<a name="280"><q-n>     280  </q-n></a><q-m>/** In between burst HSIZE should be constant*/</q-m>
<a name="281"><q-n>     281  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::hsize_stable_during_burst_check(ahb_mas_trans mas_trans_h);
<a name="282"><q-n>     282  </q-n></a>
<a name="283"><q-n>     283  </q-n></a>  <q-w>if</q-w>(chk_trans_q.size()&gt;=2) <q-w>begin</q-w>
<a name="284"><q-n>     284  </q-n></a>    <q-w>if</q-w>((mas_trans_h.hsize_type != chk_trans_q[0].hsize_type)) <q-w>begin</q-w>
<a name="285"><q-n>     285  </q-n></a>      `uvm_error(<q-l>"SIZE NOT CONSTANT!!"</q-l>,<q-l>"In between of whole burst HSIZE should be constant"</q-l>) 
<a name="286"><q-n>     286  </q-n></a>    <q-w>end</q-w>	 
<a name="287"><q-n>     287  </q-n></a>    <q-w>else</q-w> <q-w>begin</q-w>
<a name="288"><q-n>     288  </q-n></a>      <q-w>for</q-w>(<q-w>int</q-w> i=2;i&lt;chk_trans_q.size();i++) <q-w>begin</q-w>
<a name="289"><q-n>     289  </q-n></a>        <q-w>if</q-w>((mas_trans_h.hsize_type != chk_trans_q[chk_trans_q.size()-i].hsize_type))
<a name="290"><q-n>     290  </q-n></a>          error_detect=1;      
<a name="291"><q-n>     291  </q-n></a>      <q-w>end</q-w>	  
<a name="292"><q-n>     292  </q-n></a>      <q-w>if</q-w>(error_detect) <q-w>begin</q-w>
<a name="293"><q-n>     293  </q-n></a>	error_detect=0;
<a name="294"><q-n>     294  </q-n></a>        `uvm_error(<q-l>"SIZE NOT CONSTANT!!"</q-l>,<q-l>"In between of whole burst HSIZE should be constant"</q-l>) 
<a name="295"><q-n>     295  </q-n></a>      <q-w>end</q-w>
<a name="296"><q-n>     296  </q-n></a>    <q-w>end</q-w>
<a name="297"><q-n>     297  </q-n></a>  <q-w>end</q-w>
<a name="298"><q-n>     298  </q-n></a>
<a name="299"><q-n>     299  </q-n></a><q-w>endfunction</q-w> :hsize_stable_during_burst_check
<a name="300"><q-n>     300  </q-n></a>  
<a name="301"><q-n>     301  </q-n></a><q-m>/** Checks That The Error Response Must Be Of Two cycles */</q-m>
<a name="302"><q-n>     302  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::two_cycle_error_check(ahb_mas_trans mas_trans_h);
<a name="303"><q-n>     303  </q-n></a>
<a name="304"><q-n>     304  </q-n></a>  <q-w>if</q-w>(mas_trans_h.hresp_type==ERROR &amp;&amp; !mas_trans_h.HREADY) <q-w>begin</q-w>
<a name="305"><q-n>     305  </q-n></a>    chk_trans_q.delete();
<a name="306"><q-n>     306  </q-n></a>    chk_trans_q.push_back(mas_trans_h);
<a name="307"><q-n>     307  </q-n></a>    error_detect = 1;
<a name="308"><q-n>     308  </q-n></a>  <q-w>end</q-w>
<a name="309"><q-n>     309  </q-n></a>
<a name="310"><q-n>     310  </q-n></a>  <q-w>else</q-w> <q-w>if</q-w>(chk_trans_q.size()==2 &amp;&amp; error_detect) <q-w>begin</q-w>
<a name="311"><q-n>     311  </q-n></a>    <q-w>if</q-w>(!(chk_trans_q[chk_trans_q.size()-2].HREADY==0 &amp;&amp; chk_trans_q[chk_trans_q.size()-2].hresp_type==ERROR &amp;&amp; chk_trans_q[chk_trans_q.size()-1].HREADY==1 &amp;&amp; chk_trans_q[chk_trans_q.size()-1].hresp_type==ERROR)) 
<a name="312"><q-n>     312  </q-n></a>      `uvm_error(<q-l>"Checker Failed!!!"</q-l>,<q-l>"Error Response Must Be Of Two Cycle With Second Cycle Hready Is low"</q-l>)
<a name="313"><q-n>     313  </q-n></a>    chk_trans_q.delete();
<a name="314"><q-n>     314  </q-n></a>    res.delete();
<a name="315"><q-n>     315  </q-n></a>    trans_count = 0;
<a name="316"><q-n>     316  </q-n></a>    error_detect = 0;
<a name="317"><q-n>     317  </q-n></a>  <q-w>end</q-w>
<a name="318"><q-n>     318  </q-n></a> 
<a name="319"><q-n>     319  </q-n></a><q-w>endfunction</q-w> :two_cycle_error_check
<a name="320"><q-n>     320  </q-n></a>
<a name="321"><q-n>     321  </q-n></a><q-m>/** Ignored Transaction Transaction Handling Is Done */</q-m>
<a name="322"><q-n>     322  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_checker::ignored_transection(ahb_mas_trans mas_trans_h);
<a name="323"><q-n>     323  </q-n></a>
<a name="324"><q-n>     324  </q-n></a>  <q-m>/** In the incr burst when idle and nonseq is seen terminate the burst */</q-m>
<a name="325"><q-n>     325  </q-n></a>  <q-w>if</q-w>((mas_trans_h.htrans_type[0]==NONSEQ || mas_trans_h.htrans_type[0]==IDLE) &amp;&amp; chk_trans_q.size()&gt;=2 &amp;&amp; mas_trans_h.hresp_type!=ERROR) <q-w>begin</q-w>
<a name="326"><q-n>     326  </q-n></a>    <q-w>if</q-w>(chk_trans_q[chk_trans_q.size()-2].hburst_type==INCR) <q-w>begin</q-w>
<a name="327"><q-n>     327  </q-n></a>      chk_trans_q.delete();
<a name="328"><q-n>     328  </q-n></a>      res.delete();
<a name="329"><q-n>     329  </q-n></a>      trans_count = 0;
<a name="330"><q-n>     330  </q-n></a>      <q-w>if</q-w>(mas_trans_h.htrans_type[0]==NONSEQ) <q-w>begin</q-w>
<a name="331"><q-n>     331  </q-n></a>        chk_trans_q.push_back(mas_trans_h);
<a name="332"><q-n>     332  </q-n></a>        <q-w>if</q-w>(mas_trans_h.HREADY) <q-w>begin</q-w>
<a name="333"><q-n>     333  </q-n></a>	  res.push_back(mas_trans_h);
<a name="334"><q-n>     334  </q-n></a>	  trans_count++;
<a name="335"><q-n>     335  </q-n></a>        <q-w>end</q-w>
<a name="336"><q-n>     336  </q-n></a>      <q-w>end</q-w>
<a name="337"><q-n>     337  </q-n></a>    <q-w>end</q-w>
<a name="338"><q-n>     338  </q-n></a>  <q-w>end</q-w>
<a name="339"><q-n>     339  </q-n></a>
<a name="340"><q-n>     340  </q-n></a>  <q-m>/** Idle transfer should be ignored*/</q-m>
<a name="341"><q-n>     341  </q-n></a>  <q-w>if</q-w>(chk_trans_q.size()==1 &amp;&amp; mas_trans_h.htrans_type[0]==IDLE &amp;&amp; mas_trans_h.hresp_type!=ERROR) <q-w>begin</q-w>
<a name="342"><q-n>     342  </q-n></a>    chk_trans_q.delete();
<a name="343"><q-n>     343  </q-n></a>    res.delete();
<a name="344"><q-n>     344  </q-n></a>    trans_count = 0;
<a name="345"><q-n>     345  </q-n></a>  <q-w>end</q-w>
<a name="346"><q-n>     346  </q-n></a>
<a name="347"><q-n>     347  </q-n></a>  <q-m>/** After Burst Finishes The Queue Must be Deleted To Enter The New Burst Information </q-m>
<a name="348"><q-n>     348  </q-n></a><q-m>   *  and Flags Are Cleared </q-m>
<a name="349"><q-n>     349  </q-n></a><q-m>   */</q-m>
<a name="350"><q-n>     350  </q-n></a>  <q-w>if</q-w>(trans_count == beat_count &amp;&amp; mas_trans_h.hburst_type!=INCR &amp;&amp; mas_trans_h.hresp_type!=ERROR) <q-w>begin</q-w>
<a name="351"><q-n>     351  </q-n></a>    chk_trans_q.delete();
<a name="352"><q-n>     352  </q-n></a>    res.delete();
<a name="353"><q-n>     353  </q-n></a>    trans_count = 0;
<a name="354"><q-n>     354  </q-n></a>    error_detect = 0;
<a name="355"><q-n>     355  </q-n></a>  <q-w>end</q-w>
<a name="356"><q-n>     356  </q-n></a>	
<a name="357"><q-n>     357  </q-n></a><q-w>endfunction</q-w> : ignored_transection
<a name="358"><q-n>     358  </q-n></a>
<a name="359"><q-n>     359  </q-n></a>`<q-a>endif</q-w> <q-m>//AHB_MASTER_CHECKER</q-m>
</pre>
</tt>

  
</body>
</html>
