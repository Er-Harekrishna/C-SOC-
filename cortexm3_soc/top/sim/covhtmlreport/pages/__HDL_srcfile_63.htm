
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>//-----------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// The confidential and proprietary information contained in this file may</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// only be used by a person authorised under and to the extent permitted</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// by a subsisting licensing agreement from ARM Limited.</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//            (C) COPYRIGHT 2010-2013 ARM Limited.</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>//                ALL RIGHTS RESERVED</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>//</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>// This entire notice must be reproduced on all copies of this file</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>// and copies of this file may only be made by a person if such person is</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>// permitted to do so under the terms of a subsisting license agreement</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>// from ARM Limited.</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>//</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>//      SVN Information</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m>//</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>//      Checked In          : $Date: 2013-04-10 15:27:13 +0100 (Wed, 10 Apr 2013) $</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m>//</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m>//      Revision            : $Revision: 243506 $</q-m>
<a name="19"><q-n>     19  </q-n></a><q-m>//</q-m>
<a name="20"><q-n>     20  </q-n></a><q-m>//      Release Information : Cortex-M System Design Kit-r1p0-00rel0</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m>//</q-m>
<a name="22"><q-n>     22  </q-n></a><q-m>// ----------------------------------------------------------------------------</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>//  Abstract : FPGA BlockRam/OnChip SRAM</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m>// ----------------------------------------------------------------------------</q-m>
<a name="25"><q-n>     25  </q-n></a><q-m>// The read operation is pipelined. Write operation is not pipelined.</q-m>
<a name="26"><q-n>     26  </q-n></a><q-m>//`include "image.txt"</q-m>
<a name="27"><q-n>     27  </q-n></a>`<q-i>include</q-w> <q-l>"fpga_options_defs.v"</q-l>
<a name="28"><q-n>     28  </q-n></a><q-w>module</q-w> cmsdk_fpga_sram #(
<a name="29"><q-n>     29  </q-n></a><q-m>// --------------------------------------------------------------------------</q-m>
<a name="30"><q-n>     30  </q-n></a><q-m>// Parameters</q-m>
<a name="31"><q-n>     31  </q-n></a><q-m>// --------------------------------------------------------------------------</q-m>
<a name="32"><q-n>     32  </q-n></a>  <q-w>parameter</q-w> AW = 16,
<a name="33"><q-n>     33  </q-n></a>  <q-w>parameter</q-w> MEMFILE = <q-l>"image.hex"</q-l>
<a name="34"><q-n>     34  </q-n></a>  
<a name="35"><q-n>     35  </q-n></a> )
<a name="36"><q-n>     36  </q-n></a> (
<a name="37"><q-n>     37  </q-n></a>  <q-m>// Inputs</q-m>
<a name="38"><q-n>     38  </q-n></a>  <q-w>input</q-w>  <q-w>wire</q-w>          CLK,
<a name="39"><q-n>     39  </q-n></a>  <q-w>input</q-w>  <q-w>wire</q-w> [AW-1:0] ADDR,
<a name="40"><q-n>     40  </q-n></a>  <q-w>input</q-w>  <q-w>wire</q-w> [31:0]   WDATA,
<a name="41"><q-n>     41  </q-n></a>  <q-w>input</q-w>  <q-w>wire</q-w> [3:0]    WREN,
<a name="42"><q-n>     42  </q-n></a>  <q-w>input</q-w>  <q-w>wire</q-w>          CS,
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a>  <q-m>// Outputs</q-m>
<a name="45"><q-n>     45  </q-n></a>  <q-w>output</q-w> <q-w>wire</q-w> [31:0]   RDATA
<a name="46"><q-n>     46  </q-n></a>  );
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="49"><q-n>     49  </q-n></a><q-m>// Constant Declarations</q-m>
<a name="50"><q-n>     50  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="51"><q-n>     51  </q-n></a>localparam AWT = ((1&lt;&lt;(AW-0))-1);
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>  <q-m>// Memory Array</q-m>
<a name="54"><q-n>     54  </q-n></a>  <q-w>reg</q-w>     [7:0]   BRAM0 [AWT:0];
<a name="55"><q-n>     55  </q-n></a>  <q-w>reg</q-w>     [7:0]   BRAM1 [AWT:0];
<a name="56"><q-n>     56  </q-n></a>  <q-w>reg</q-w>     [7:0]   BRAM2 [AWT:0];
<a name="57"><q-n>     57  </q-n></a>  <q-w>reg</q-w>     [7:0]   BRAM3 [AWT:0];
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>  <q-m>// Internal signals</q-m>
<a name="60"><q-n>     60  </q-n></a>  <q-w>reg</q-w>     [AW-1:0]  addr_q1;
<a name="61"><q-n>     61  </q-n></a>  <q-w>wire</q-w>    [3:0]     write_enable;
<a name="62"><q-n>     62  </q-n></a>  <q-w>reg</q-w>               cs_reg;
<a name="63"><q-n>     63  </q-n></a>  <q-w>wire</q-w>    [31:0]    read_data;
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a>  <q-w>assign</q-w> write_enable[3:0] = WREN[3:0] &amp; {4{CS}};
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>  <q-w>always</q-w> @ (<q-a>posedge</q-w> CLK)
<a name="68"><q-n>     68  </q-n></a>    <q-w>begin</q-w>
<a name="69"><q-n>     69  </q-n></a>    cs_reg &lt;= CS;
<a name="70"><q-n>     70  </q-n></a>    <q-w>end</q-w>
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>  <q-m>// Infer Block RAM - syntax is very specific.</q-m>
<a name="73"><q-n>     73  </q-n></a>  <q-w>always</q-w> @ (<q-a>posedge</q-w> CLK)
<a name="74"><q-n>     74  </q-n></a>    <q-w>begin</q-w>
<a name="75"><q-n>     75  </q-n></a>      <q-w>if</q-w> (write_enable[0])
<a name="76"><q-n>     76  </q-n></a>        BRAM0[ADDR] &lt;= WDATA[7:0];
<a name="77"><q-n>     77  </q-n></a>      <q-w>if</q-w> (write_enable[1])
<a name="78"><q-n>     78  </q-n></a>        BRAM1[ADDR] &lt;= WDATA[15:8];
<a name="79"><q-n>     79  </q-n></a>      <q-w>if</q-w> (write_enable[2])
<a name="80"><q-n>     80  </q-n></a>        BRAM2[ADDR] &lt;= WDATA[23:16];
<a name="81"><q-n>     81  </q-n></a>      <q-w>if</q-w> (write_enable[3])
<a name="82"><q-n>     82  </q-n></a>        BRAM3[ADDR] &lt;= WDATA[31:24];
<a name="83"><q-n>     83  </q-n></a>      <q-m>// do not use enable on read interface.</q-m>
<a name="84"><q-n>     84  </q-n></a>      addr_q1 &lt;= ADDR[AW-1:0];
<a name="85"><q-n>     85  </q-n></a>    <q-w>end</q-w>
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>  <q-w>assign</q-w> read_data  = {BRAM3[addr_q1],BRAM2[addr_q1],BRAM1[addr_q1],BRAM0[addr_q1]};
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a>  <q-w>assign</q-w> RDATA      = (cs_reg) ? read_data : {32{1'b0}};
<a name="91"><q-n>     91  </q-n></a>
<a name="92"><q-n>     92  </q-n></a><q-m>//`ifdef SIMULATION</q-m>
<a name="93"><q-n>     93  </q-n></a>  <q-w>integer</q-w> i;
<a name="94"><q-n>     94  </q-n></a>  localparam MEM_SIZE = 2**(AW+2);
<a name="95"><q-n>     95  </q-n></a>  <q-w>reg</q-w> [7:0] fileimage [0:((MEM_SIZE)-1)];
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="98"><q-n>     98  </q-n></a>    <q-m>//  Initialize memory content to avoid X value on bus</q-m>
<a name="99"><q-n>     99  </q-n></a>    <q-w>for</q-w> (i = 0; i &lt;= AWT; i=i+1)
<a name="100"><q-n>     100  </q-n></a>      <q-w>begin</q-w>
<a name="101"><q-n>     101  </q-n></a>        BRAM0[i] = 8'h00;
<a name="102"><q-n>     102  </q-n></a>        BRAM1[i] = 8'h00;
<a name="103"><q-n>     103  </q-n></a>        BRAM2[i] = 8'h00;
<a name="104"><q-n>     104  </q-n></a>        BRAM3[i] = 8'h00;
<a name="105"><q-n>     105  </q-n></a>      <q-w>end</q-w>
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>`ifndef RAMPRELOAD_SPI
<a name="108"><q-n>     108  </q-n></a>  <q-m>// Simulation</q-m>
<a name="109"><q-n>     109  </q-n></a>  $readmemh(MEMFILE, fileimage);
<a name="110"><q-n>     110  </q-n></a>      <q-m>// Copy from single array to splitted array</q-m>
<a name="111"><q-n>     111  </q-n></a>    <q-w>for</q-w> (i=0;i&lt;(MEM_SIZE/4); i= i+1)
<a name="112"><q-n>     112  </q-n></a>    <q-w>begin</q-w>
<a name="113"><q-n>     113  </q-n></a>      BRAM3[i] = fileimage[i*4+3];
<a name="114"><q-n>     114  </q-n></a>      BRAM2[i] = fileimage[i*4+2];
<a name="115"><q-n>     115  </q-n></a>      BRAM1[i] = fileimage[i*4+1];
<a name="116"><q-n>     116  </q-n></a>      BRAM0[i] = fileimage[i*4];
<a name="117"><q-n>     117  </q-n></a>
<a name="118"><q-n>     118  </q-n></a>    <q-w>end</q-w>
<a name="119"><q-n>     119  </q-n></a>`<q-a>endif</q-w> <q-m>// RAMPRELOAD_SPI</q-m>
<a name="120"><q-n>     120  </q-n></a>  <q-w>end</q-w>
<a name="121"><q-n>     121  </q-n></a><q-m>//`endif // SIMULATION</q-m>
<a name="122"><q-n>     122  </q-n></a>
<a name="123"><q-n>     123  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
