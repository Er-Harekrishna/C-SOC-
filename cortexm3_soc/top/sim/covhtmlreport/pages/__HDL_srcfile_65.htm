
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// Copyright 2017 ETH Zurich and University of Bologna.</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// Copyright and related rights are licensed under the Solderpad Hardware</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// License, Version 0.51 (the License); you may not use this file except in</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// compliance with the License.  You may obtain a copy of the License at</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>// or agreed to in writing, software, hardware and materials distributed under</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>// this License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>// CONDITIONS OF ANY KIND, either express or implied. See the License for the</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>// specific language governing permissions and limitations under the License.</q-m>
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a><q-w>module</q-w> io_generic_fifo
<a name="12"><q-n>     12  </q-n></a>#(
<a name="13"><q-n>     13  </q-n></a>    <q-w>parameter</q-w> DATA_WIDTH = 32,
<a name="14"><q-n>     14  </q-n></a>    <q-w>parameter</q-w> BUFFER_DEPTH = 2,
<a name="15"><q-n>     15  </q-n></a>    <q-w>parameter</q-w> LOG_BUFFER_DEPTH = $clog2(BUFFER_DEPTH)
<a name="16"><q-n>     16  </q-n></a>)
<a name="17"><q-n>     17  </q-n></a>(
<a name="18"><q-n>     18  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      clk_i,
<a name="19"><q-n>     19  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      rstn_i,
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      clr_i,
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w> [LOG_BUFFER_DEPTH:0] elements_o,
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w> [DATA_WIDTH-1 : 0]   data_o,
<a name="26"><q-n>     26  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w>                      valid_o,
<a name="27"><q-n>     27  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      ready_i,
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      valid_i,
<a name="30"><q-n>     30  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [DATA_WIDTH-1 : 0]   data_i,
<a name="31"><q-n>     31  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w>                      ready_o
<a name="32"><q-n>     32  </q-n></a>);
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>    <q-m>// Internal data structures</q-m>
<a name="35"><q-n>     35  </q-n></a>    <q-m>/* verilator lint_off WIDTH */</q-m>
<a name="36"><q-n>     36  </q-n></a>    <q-w>logic</q-w> [LOG_BUFFER_DEPTH-1:0]     pointer_in;  <q-m>// location to which we last wrote</q-m>
<a name="37"><q-n>     37  </q-n></a>    <q-w>logic</q-w> [LOG_BUFFER_DEPTH-1:0]     pointer_out; <q-m>// location from which we last sent</q-m>
<a name="38"><q-n>     38  </q-n></a>    <q-m>/* lint_off */</q-m>
<a name="39"><q-n>     39  </q-n></a>    <q-w>logic</q-w> [LOG_BUFFER_DEPTH:0]       elements;    <q-m>// number of elements in the buffer</q-m>
<a name="40"><q-n>     40  </q-n></a>    <q-w>logic</q-w> [DATA_WIDTH-1:0]           buffer [BUFFER_DEPTH - 1 : 0];
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>    <q-w>logic</q-w>                            full;
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a>    <q-w>int</q-w> <q-w>unsigned</q-w>                     loop1;
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>    <q-w>assign</q-w> full = (elements == BUFFER_DEPTH);
<a name="47"><q-n>     47  </q-n></a>    <q-w>assign</q-w> elements_o = elements;
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a>    <q-w>always_ff</q-w> @(<q-a>posedge</q-w> clk_i, <q-a>negedge</q-w> rstn_i)
<a name="50"><q-n>     50  </q-n></a>    <q-w>begin</q-w>: elements_sequential
<a name="51"><q-n>     51  </q-n></a>        <q-w>if</q-w> (rstn_i == 1'b0)
<a name="52"><q-n>     52  </q-n></a>            elements &lt;= 0;
<a name="53"><q-n>     53  </q-n></a>        <q-w>else</q-w>
<a name="54"><q-n>     54  </q-n></a>        <q-w>begin</q-w>
<a name="55"><q-n>     55  </q-n></a>            <q-w>if</q-w> (clr_i)
<a name="56"><q-n>     56  </q-n></a>                elements &lt;= 0;
<a name="57"><q-n>     57  </q-n></a>            <q-w>else</q-w>
<a name="58"><q-n>     58  </q-n></a>            <q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a>                <q-m>// ------------------</q-m>
<a name="60"><q-n>     60  </q-n></a>                <q-m>// Are we filling up?</q-m>
<a name="61"><q-n>     61  </q-n></a>                <q-m>// ------------------</q-m>
<a name="62"><q-n>     62  </q-n></a>                <q-m>// One out, none in</q-m>
<a name="63"><q-n>     63  </q-n></a>                <q-w>if</q-w> (ready_i &amp;&amp; valid_o &amp;&amp; (!valid_i || full))
<a name="64"><q-n>     64  </q-n></a>                    elements &lt;= elements - 1;
<a name="65"><q-n>     65  </q-n></a>                    <q-m>// None out, one in</q-m>
<a name="66"><q-n>     66  </q-n></a>                <q-w>else</q-w> <q-w>if</q-w> ((!valid_o || !ready_i) &amp;&amp; valid_i &amp;&amp; !full)
<a name="67"><q-n>     67  </q-n></a>                    elements &lt;= elements + 1;
<a name="68"><q-n>     68  </q-n></a>                    <q-m>// Else, either one out and one in, or none out and none in - stays unchanged</q-m>
<a name="69"><q-n>     69  </q-n></a>            <q-w>end</q-w>
<a name="70"><q-n>     70  </q-n></a>        <q-w>end</q-w>
<a name="71"><q-n>     71  </q-n></a>    <q-w>end</q-w>
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>    <q-w>always_ff</q-w> @(<q-a>posedge</q-w> clk_i, <q-a>negedge</q-w> rstn_i)
<a name="74"><q-n>     74  </q-n></a>    <q-w>begin</q-w>: buffers_sequential
<a name="75"><q-n>     75  </q-n></a>        <q-w>if</q-w> (rstn_i == 1'b0)
<a name="76"><q-n>     76  </q-n></a>        <q-w>begin</q-w>
<a name="77"><q-n>     77  </q-n></a>                <q-w>for</q-w> (loop1 = 0 ; loop1 &lt; BUFFER_DEPTH ; loop1 = loop1 + 1)
<a name="78"><q-n>     78  </q-n></a>                        buffer[loop1] &lt;= 0;
<a name="79"><q-n>     79  </q-n></a>        <q-w>end</q-w>
<a name="80"><q-n>     80  </q-n></a>        <q-w>else</q-w>
<a name="81"><q-n>     81  </q-n></a>        <q-w>begin</q-w>
<a name="82"><q-n>     82  </q-n></a>                <q-m>// Update the memory</q-m>
<a name="83"><q-n>     83  </q-n></a>                <q-w>if</q-w> (valid_i &amp;&amp; !full)
<a name="84"><q-n>     84  </q-n></a>                        buffer[pointer_in] &lt;= data_i;
<a name="85"><q-n>     85  </q-n></a>        <q-w>end</q-w>
<a name="86"><q-n>     86  </q-n></a>    <q-w>end</q-w>
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>    <q-w>always_ff</q-w> @(<q-a>posedge</q-w> clk_i, <q-a>negedge</q-w> rstn_i)
<a name="89"><q-n>     89  </q-n></a>    <q-w>begin</q-w>: sequential
<a name="90"><q-n>     90  </q-n></a>        <q-w>if</q-w> (rstn_i == 1'b0)
<a name="91"><q-n>     91  </q-n></a>        <q-w>begin</q-w>
<a name="92"><q-n>     92  </q-n></a>                pointer_out &lt;= 0;
<a name="93"><q-n>     93  </q-n></a>                pointer_in  &lt;= 0;
<a name="94"><q-n>     94  </q-n></a>        <q-w>end</q-w>
<a name="95"><q-n>     95  </q-n></a>        <q-w>else</q-w>
<a name="96"><q-n>     96  </q-n></a>        <q-w>begin</q-w>
<a name="97"><q-n>     97  </q-n></a>                <q-w>if</q-w>(clr_i)
<a name="98"><q-n>     98  </q-n></a>                <q-w>begin</q-w>
<a name="99"><q-n>     99  </q-n></a>                    pointer_out &lt;= 0;
<a name="100"><q-n>     100  </q-n></a>                    pointer_in  &lt;= 0;
<a name="101"><q-n>     101  </q-n></a>                <q-w>end</q-w>
<a name="102"><q-n>     102  </q-n></a>                <q-w>else</q-w>
<a name="103"><q-n>     103  </q-n></a>                <q-w>begin</q-w>
<a name="104"><q-n>     104  </q-n></a>                    <q-m>// ------------------------------------</q-m>
<a name="105"><q-n>     105  </q-n></a>                    <q-m>// Check what to do with the input side</q-m>
<a name="106"><q-n>     106  </q-n></a>                    <q-m>// ------------------------------------</q-m>
<a name="107"><q-n>     107  </q-n></a>                    <q-m>// We have some input, increase by 1 the input pointer</q-m>
<a name="108"><q-n>     108  </q-n></a>                    <q-w>if</q-w> (valid_i &amp;&amp; !full)
<a name="109"><q-n>     109  </q-n></a>                    <q-w>begin</q-w>
<a name="110"><q-n>     110  </q-n></a>                        <q-w>if</q-w> (pointer_in == $<q-w>unsigned</q-w>(BUFFER_DEPTH - 1))
<a name="111"><q-n>     111  </q-n></a>                                pointer_in &lt;= 0;
<a name="112"><q-n>     112  </q-n></a>                        <q-w>else</q-w>
<a name="113"><q-n>     113  </q-n></a>                                pointer_in &lt;= pointer_in + 1;
<a name="114"><q-n>     114  </q-n></a>                    <q-w>end</q-w>
<a name="115"><q-n>     115  </q-n></a>                    <q-m>// Else we don't have any input, the input pointer stays the same</q-m>
<a name="116"><q-n>     116  </q-n></a>
<a name="117"><q-n>     117  </q-n></a>                    <q-m>// -------------------------------------</q-m>
<a name="118"><q-n>     118  </q-n></a>                    <q-m>// Check what to do with the output side</q-m>
<a name="119"><q-n>     119  </q-n></a>                    <q-m>// -------------------------------------</q-m>
<a name="120"><q-n>     120  </q-n></a>                    <q-m>// We had pushed one flit out, we can try to go for the next one</q-m>
<a name="121"><q-n>     121  </q-n></a>                    <q-w>if</q-w> (ready_i &amp;&amp; valid_o)
<a name="122"><q-n>     122  </q-n></a>                    <q-w>begin</q-w>
<a name="123"><q-n>     123  </q-n></a>                        <q-w>if</q-w> (pointer_out == $<q-w>unsigned</q-w>(BUFFER_DEPTH - 1))
<a name="124"><q-n>     124  </q-n></a>                                pointer_out &lt;= 0;
<a name="125"><q-n>     125  </q-n></a>                        <q-w>else</q-w>
<a name="126"><q-n>     126  </q-n></a>                                pointer_out &lt;= pointer_out + 1;
<a name="127"><q-n>     127  </q-n></a>                    <q-w>end</q-w>
<a name="128"><q-n>     128  </q-n></a>                    <q-m>// Else stay on the same output location</q-m>
<a name="129"><q-n>     129  </q-n></a>                <q-w>end</q-w>
<a name="130"><q-n>     130  </q-n></a>        <q-w>end</q-w>
<a name="131"><q-n>     131  </q-n></a>    <q-w>end</q-w>
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>    <q-m>// Update output ports</q-m>
<a name="134"><q-n>     134  </q-n></a>    <q-w>assign</q-w> data_o  = buffer[pointer_out];
<a name="135"><q-n>     135  </q-n></a>    <q-w>assign</q-w> valid_o = (elements != 0);
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a>    <q-w>assign</q-w> ready_o = ~full;
<a name="138"><q-n>     138  </q-n></a>
<a name="139"><q-n>     139  </q-n></a><q-w>endmodule</q-w>
</pre>
</tt>

  
</body>
</html>
