
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>//-----------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// The confidential and proprietary information contained in this file may</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// only be used by a person authorised under and to the extent permitted</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// by a subsisting licensing agreement from ARM Limited.</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//            (C) COPYRIGHT 2001-2013-2019 ARM Limited.</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>//                ALL RIGHTS RESERVED</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>//</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>// This entire notice must be reproduced on all copies of this file</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>// and copies of this file may only be made by a person if such person is</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>// permitted to do so under the terms of a subsisting license agreement</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>// from ARM Limited.</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>//</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>//      SVN Information</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m>//</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>//      Checked In          : $Date: 2013-01-23 11:45:45 +0000 (Wed, 23 Jan 2013) $</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m>//</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m>//      Revision            : $Revision: 234562 $</q-m>
<a name="19"><q-n>     19  </q-n></a><q-m>//</q-m>
<a name="20"><q-n>     20  </q-n></a><q-m>//      Release Information : Cortex-M System Design Kit-r1p0-01rel0</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m>//</q-m>
<a name="22"><q-n>     22  </q-n></a><q-m>//-----------------------------------------------------------------------------</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>//</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m>//-----------------------------------------------------------------------------</q-m>
<a name="25"><q-n>     25  </q-n></a><q-m>//  Abstract             : The MatrixDecode is used to determine which output</q-m>
<a name="26"><q-n>     26  </q-n></a><q-m>//                         stage is required for a particular access. Addresses</q-m>
<a name="27"><q-n>     27  </q-n></a><q-m>//                         that do not map to an Output port are diverted to</q-m>
<a name="28"><q-n>     28  </q-n></a><q-m>//                         the local default slave.</q-m>
<a name="29"><q-n>     29  </q-n></a><q-m>//</q-m>
<a name="30"><q-n>     30  </q-n></a><q-m>//  Notes               : The bus matrix has sparse connectivity.</q-m>
<a name="31"><q-n>     31  </q-n></a><q-m>//</q-m>
<a name="32"><q-n>     32  </q-n></a><q-m>//-----------------------------------------------------------------------------</q-m>
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>`<q-a>timescale</q-w> 1<q-v>ns</q-w>/1<q-v>ps</q-w>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a><q-w>module</q-w> cmsdk_MyDecoderNameS0 (
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>    <q-m>// Common AHB signals</q-m>
<a name="39"><q-n>     39  </q-n></a>    HCLK,
<a name="40"><q-n>     40  </q-n></a>    HRESETn,
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>    <q-m>// Signals from the Input stage</q-m>
<a name="43"><q-n>     43  </q-n></a>    HREADYS,
<a name="44"><q-n>     44  </q-n></a>    sel_dec,
<a name="45"><q-n>     45  </q-n></a>    decode_addr_dec,
<a name="46"><q-n>     46  </q-n></a>    trans_dec,
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>    <q-m>// Bus-switch output 0</q-m>
<a name="49"><q-n>     49  </q-n></a>    active_dec0,
<a name="50"><q-n>     50  </q-n></a>    readyout_dec0,
<a name="51"><q-n>     51  </q-n></a>    resp_dec0,
<a name="52"><q-n>     52  </q-n></a>    rdata_dec0,
<a name="53"><q-n>     53  </q-n></a>    ruser_dec0,
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>    <q-m>// Bus-switch output 1</q-m>
<a name="56"><q-n>     56  </q-n></a>    active_dec1,
<a name="57"><q-n>     57  </q-n></a>    readyout_dec1,
<a name="58"><q-n>     58  </q-n></a>    resp_dec1,
<a name="59"><q-n>     59  </q-n></a>    rdata_dec1,
<a name="60"><q-n>     60  </q-n></a>    ruser_dec1,
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>    <q-m>// Output port selection signals</q-m>
<a name="63"><q-n>     63  </q-n></a>    sel_dec0,
<a name="64"><q-n>     64  </q-n></a>    sel_dec1,
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>    <q-m>// Selected Output port data and control signals</q-m>
<a name="67"><q-n>     67  </q-n></a>    active_dec,
<a name="68"><q-n>     68  </q-n></a>    HREADYOUTS,
<a name="69"><q-n>     69  </q-n></a>    HRESPS,
<a name="70"><q-n>     70  </q-n></a>    HRUSERS,
<a name="71"><q-n>     71  </q-n></a>    HRDATAS
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>    );
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="77"><q-n>     77  </q-n></a><q-m>// Input and Output declarations</q-m>
<a name="78"><q-n>     78  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="79"><q-n>     79  </q-n></a>
<a name="80"><q-n>     80  </q-n></a>    <q-m>// Common AHB signals</q-m>
<a name="81"><q-n>     81  </q-n></a>    <q-w>input</q-w>         HCLK;           <q-m>// AHB System Clock</q-m>
<a name="82"><q-n>     82  </q-n></a>    <q-w>input</q-w>         HRESETn;        <q-m>// AHB System Reset</q-m>
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a>    <q-m>// Signals from the Input stage</q-m>
<a name="85"><q-n>     85  </q-n></a>    <q-w>input</q-w>         HREADYS;        <q-m>// Transfer done</q-m>
<a name="86"><q-n>     86  </q-n></a>    <q-w>input</q-w>         sel_dec;            <q-m>// HSEL input</q-m>
<a name="87"><q-n>     87  </q-n></a>    <q-w>input</q-w> [31:10] decode_addr_dec;     <q-m>// HADDR decoder input</q-m>
<a name="88"><q-n>     88  </q-n></a>    <q-w>input</q-w>   [1:0] trans_dec;          <q-m>// Input port HTRANS signal</q-m>
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a>    <q-m>// Bus-switch output MI0</q-m>
<a name="91"><q-n>     91  </q-n></a>    <q-w>input</q-w>         active_dec0;        <q-m>// Output stage MI0 active_dec signal</q-m>
<a name="92"><q-n>     92  </q-n></a>    <q-w>input</q-w>         readyout_dec0;      <q-m>// HREADYOUT input</q-m>
<a name="93"><q-n>     93  </q-n></a>    <q-w>input</q-w>   [1:0] resp_dec0;          <q-m>// HRESP input</q-m>
<a name="94"><q-n>     94  </q-n></a>    <q-w>input</q-w>  [31:0] rdata_dec0;         <q-m>// HRDATA input</q-m>
<a name="95"><q-n>     95  </q-n></a>    <q-w>input</q-w>  [31:0] ruser_dec0;         <q-m>// HRUSER input</q-m>
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a>    <q-m>// Bus-switch output MI1</q-m>
<a name="98"><q-n>     98  </q-n></a>    <q-w>input</q-w>         active_dec1;        <q-m>// Output stage MI1 active_dec signal</q-m>
<a name="99"><q-n>     99  </q-n></a>    <q-w>input</q-w>         readyout_dec1;      <q-m>// HREADYOUT input</q-m>
<a name="100"><q-n>     100  </q-n></a>    <q-w>input</q-w>   [1:0] resp_dec1;          <q-m>// HRESP input</q-m>
<a name="101"><q-n>     101  </q-n></a>    <q-w>input</q-w>  [31:0] rdata_dec1;         <q-m>// HRDATA input</q-m>
<a name="102"><q-n>     102  </q-n></a>    <q-w>input</q-w>  [31:0] ruser_dec1;         <q-m>// HRUSER input</q-m>
<a name="103"><q-n>     103  </q-n></a>
<a name="104"><q-n>     104  </q-n></a>    <q-m>// Output port selection signals</q-m>
<a name="105"><q-n>     105  </q-n></a>    <q-w>output</q-w>        sel_dec0;           <q-m>// HSEL output</q-m>
<a name="106"><q-n>     106  </q-n></a>    <q-w>output</q-w>        sel_dec1;           <q-m>// HSEL output</q-m>
<a name="107"><q-n>     107  </q-n></a>
<a name="108"><q-n>     108  </q-n></a>    <q-m>// Selected Output port data and control signals</q-m>
<a name="109"><q-n>     109  </q-n></a>    <q-w>output</q-w>        active_dec;         <q-m>// Combinatorial active_dec O/P</q-m>
<a name="110"><q-n>     110  </q-n></a>    <q-w>output</q-w>        HREADYOUTS;     <q-m>// HREADY feedback output</q-m>
<a name="111"><q-n>     111  </q-n></a>    <q-w>output</q-w>  [1:0] HRESPS;         <q-m>// Transfer response</q-m>
<a name="112"><q-n>     112  </q-n></a>    <q-w>output</q-w> [31:0] HRUSERS;        <q-m>// User read Data</q-m>
<a name="113"><q-n>     113  </q-n></a>    <q-w>output</q-w> [31:0] HRDATAS;        <q-m>// Read Data</q-m>
<a name="114"><q-n>     114  </q-n></a>
<a name="115"><q-n>     115  </q-n></a>
<a name="116"><q-n>     116  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="117"><q-n>     117  </q-n></a><q-m>// Wire declarations</q-m>
<a name="118"><q-n>     118  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="119"><q-n>     119  </q-n></a>
<a name="120"><q-n>     120  </q-n></a>    <q-m>// Common AHB signals</q-m>
<a name="121"><q-n>     121  </q-n></a>    <q-w>wire</q-w>          HCLK;            <q-m>// AHB System Clock</q-m>
<a name="122"><q-n>     122  </q-n></a>    <q-w>wire</q-w>          HRESETn;         <q-m>// AHB System Reset</q-m>
<a name="123"><q-n>     123  </q-n></a>
<a name="124"><q-n>     124  </q-n></a>    <q-m>// Signals from the Input stage</q-m>
<a name="125"><q-n>     125  </q-n></a>    <q-w>wire</q-w>          HREADYS;         <q-m>// Transfer done</q-m>
<a name="126"><q-n>     126  </q-n></a>    <q-w>wire</q-w>          sel_dec;             <q-m>// HSEL input</q-m>
<a name="127"><q-n>     127  </q-n></a>    <q-w>wire</q-w>  [31:10] decode_addr_dec;      <q-m>// HADDR input</q-m>
<a name="128"><q-n>     128  </q-n></a>    <q-w>wire</q-w>    [1:0] trans_dec;           <q-m>// Input port HTRANS signal</q-m>
<a name="129"><q-n>     129  </q-n></a>
<a name="130"><q-n>     130  </q-n></a>    <q-m>// Bus-switch output MI0</q-m>
<a name="131"><q-n>     131  </q-n></a>    <q-w>wire</q-w>          active_dec0;         <q-m>// active_dec signal</q-m>
<a name="132"><q-n>     132  </q-n></a>    <q-w>wire</q-w>          readyout_dec0;       <q-m>// HREADYOUT input</q-m>
<a name="133"><q-n>     133  </q-n></a>    <q-w>wire</q-w>    [1:0] resp_dec0;           <q-m>// HRESP input</q-m>
<a name="134"><q-n>     134  </q-n></a>    <q-w>wire</q-w>   [31:0] rdata_dec0;          <q-m>// HRDATA input</q-m>
<a name="135"><q-n>     135  </q-n></a>    <q-w>wire</q-w>   [31:0] ruser_dec0;          <q-m>// HRUSER input</q-m>
<a name="136"><q-n>     136  </q-n></a>    <q-w>reg</q-w>           sel_dec0;            <q-m>// HSEL output</q-m>
<a name="137"><q-n>     137  </q-n></a>
<a name="138"><q-n>     138  </q-n></a>    <q-m>// Bus-switch output MI1</q-m>
<a name="139"><q-n>     139  </q-n></a>    <q-w>wire</q-w>          active_dec1;         <q-m>// active_dec signal</q-m>
<a name="140"><q-n>     140  </q-n></a>    <q-w>wire</q-w>          readyout_dec1;       <q-m>// HREADYOUT input</q-m>
<a name="141"><q-n>     141  </q-n></a>    <q-w>wire</q-w>    [1:0] resp_dec1;           <q-m>// HRESP input</q-m>
<a name="142"><q-n>     142  </q-n></a>    <q-w>wire</q-w>   [31:0] rdata_dec1;          <q-m>// HRDATA input</q-m>
<a name="143"><q-n>     143  </q-n></a>    <q-w>wire</q-w>   [31:0] ruser_dec1;          <q-m>// HRUSER input</q-m>
<a name="144"><q-n>     144  </q-n></a>    <q-w>reg</q-w>           sel_dec1;            <q-m>// HSEL output</q-m>
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a>
<a name="147"><q-n>     147  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="148"><q-n>     148  </q-n></a><q-m>// Signal declarations</q-m>
<a name="149"><q-n>     149  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="150"><q-n>     150  </q-n></a>
<a name="151"><q-n>     151  </q-n></a>    <q-m>// Selected Output port data and control signals</q-m>
<a name="152"><q-n>     152  </q-n></a>    <q-w>reg</q-w>           active_dec;          <q-m>// Combinatorial active_dec O/P signal</q-m>
<a name="153"><q-n>     153  </q-n></a>    <q-w>reg</q-w>           HREADYOUTS;      <q-m>// Combinatorial HREADYOUT signal</q-m>
<a name="154"><q-n>     154  </q-n></a>    <q-w>reg</q-w>     [1:0] HRESPS;          <q-m>// Combinatorial HRESPS signal</q-m>
<a name="155"><q-n>     155  </q-n></a>    <q-w>reg</q-w>    [31:0] HRUSERS;
<a name="156"><q-n>     156  </q-n></a>    <q-w>reg</q-w>    [31:0] HRDATAS;         <q-m>// Read data bus</q-m>
<a name="157"><q-n>     157  </q-n></a>
<a name="158"><q-n>     158  </q-n></a>    <q-w>reg</q-w>     [2:0] addr_out_port;     <q-m>// Address output ports</q-m>
<a name="159"><q-n>     159  </q-n></a>    <q-w>reg</q-w>     [2:0] data_out_port;     <q-m>// Data output ports</q-m>
<a name="160"><q-n>     160  </q-n></a>
<a name="161"><q-n>     161  </q-n></a>    <q-m>// Default slave signals</q-m>
<a name="162"><q-n>     162  </q-n></a>    <q-w>reg</q-w>           sel_dft_slv;       <q-m>// HSEL signal</q-m>
<a name="163"><q-n>     163  </q-n></a>    <q-w>wire</q-w>          readyout_dft_slv;  <q-m>// HREADYOUT signal</q-m>
<a name="164"><q-n>     164  </q-n></a>    <q-w>wire</q-w>    [1:0] resp_dft_slv;      <q-m>// Combinatorial HRESPS signal</q-m>
<a name="165"><q-n>     165  </q-n></a>
<a name="166"><q-n>     166  </q-n></a>
<a name="167"><q-n>     167  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="168"><q-n>     168  </q-n></a><q-m>// Beginning of main code</q-m>
<a name="169"><q-n>     169  </q-n></a><q-m>// -----------------------------------------------------------------------------</q-m>
<a name="170"><q-n>     170  </q-n></a>
<a name="171"><q-n>     171  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="172"><q-n>     172  </q-n></a><q-m>// Default slave (accessed when HADDR is unmapped)</q-m>
<a name="173"><q-n>     173  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="174"><q-n>     174  </q-n></a>
<a name="175"><q-n>     175  </q-n></a>  cm3_matrix_default_slave u_cm3_matrix_default_slave (
<a name="176"><q-n>     176  </q-n></a>
<a name="177"><q-n>     177  </q-n></a>    <q-m>// Common AHB signals</q-m>
<a name="178"><q-n>     178  </q-n></a>    .HCLK        (HCLK),
<a name="179"><q-n>     179  </q-n></a>    .HRESETn     (HRESETn),
<a name="180"><q-n>     180  </q-n></a>
<a name="181"><q-n>     181  </q-n></a>    <q-m>// AHB Control signals</q-m>
<a name="182"><q-n>     182  </q-n></a>    .HSEL        (sel_dft_slv),
<a name="183"><q-n>     183  </q-n></a>    .HTRANS      (trans_dec),
<a name="184"><q-n>     184  </q-n></a>    .HREADY      (HREADYS),
<a name="185"><q-n>     185  </q-n></a>    .HREADYOUT   (readyout_dft_slv),
<a name="186"><q-n>     186  </q-n></a>    .HRESP       (resp_dft_slv)
<a name="187"><q-n>     187  </q-n></a>
<a name="188"><q-n>     188  </q-n></a>    );
<a name="189"><q-n>     189  </q-n></a>
<a name="190"><q-n>     190  </q-n></a>
<a name="191"><q-n>     191  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="192"><q-n>     192  </q-n></a><q-m>// Address phase signals</q-m>
<a name="193"><q-n>     193  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="194"><q-n>     194  </q-n></a>
<a name="195"><q-n>     195  </q-n></a><q-m>// The address decode is done in two stages. This is so that the address</q-m>
<a name="196"><q-n>     196  </q-n></a><q-m>//  decode occurs in only one process, p_addr_out_portComb, and then the select</q-m>
<a name="197"><q-n>     197  </q-n></a><q-m>//  signal is factored in.</q-m>
<a name="198"><q-n>     198  </q-n></a><q-m>//</q-m>
<a name="199"><q-n>     199  </q-n></a><q-m>// Note that the hexadecimal address values are reformatted to align with the</q-m>
<a name="200"><q-n>     200  </q-n></a><q-m>//  lower bound of decode_addr_dec[31:10], which is not a hex character boundary</q-m>
<a name="201"><q-n>     201  </q-n></a>
<a name="202"><q-n>     202  </q-n></a>  <q-w>always</q-w> @ (
<a name="203"><q-n>     203  </q-n></a>             decode_addr_dec <q-t>or</q-w> data_out_port <q-t>or</q-w> trans_dec
<a name="204"><q-n>     204  </q-n></a>           )
<a name="205"><q-n>     205  </q-n></a>    <q-w>begin</q-w> : p_addr_out_port_comb
<a name="206"><q-n>     206  </q-n></a>      <q-m>// Address region 0x00000000-0x0000ffff</q-m>
<a name="207"><q-n>     207  </q-n></a>      <q-w>if</q-w> (((decode_addr_dec &gt;= 22'h000000) &amp; (decode_addr_dec &lt;= 22'h00003f))
<a name="208"><q-n>     208  </q-n></a>                           | ((data_out_port == 3'b000) &amp; (trans_dec == 2'b00)))
<a name="209"><q-n>     209  </q-n></a>        addr_out_port = 3'b000;  <q-m>// Select Output port MI0</q-m>
<a name="210"><q-n>     210  </q-n></a>
<a name="211"><q-n>     211  </q-n></a>      <q-m>// Address region 0x00010000-0x0001ffff</q-m>
<a name="212"><q-n>     212  </q-n></a>      <q-w>else</q-w> <q-w>if</q-w> (((decode_addr_dec &gt;= 22'h000040) &amp; (decode_addr_dec &lt;= 22'h00007f))
<a name="213"><q-n>     213  </q-n></a>                           | ((data_out_port == 3'b001) &amp; (trans_dec == 2'b00)))
<a name="214"><q-n>     214  </q-n></a>        addr_out_port = 3'b001;  <q-m>// Select Output port MI1</q-m>
<a name="215"><q-n>     215  </q-n></a>
<a name="216"><q-n>     216  </q-n></a>      <q-w>else</q-w>
<a name="217"><q-n>     217  </q-n></a>        addr_out_port = 3'b100;   <q-m>// Select the default slave</q-m>
<a name="218"><q-n>     218  </q-n></a>    <q-w>end</q-w> <q-m>// block: p_addr_out_port_comb</q-m>
<a name="219"><q-n>     219  </q-n></a>
<a name="220"><q-n>     220  </q-n></a>  <q-m>// Select signal decode</q-m>
<a name="221"><q-n>     221  </q-n></a>  <q-w>always</q-w> @ (sel_dec <q-t>or</q-w> addr_out_port)
<a name="222"><q-n>     222  </q-n></a>    <q-w>begin</q-w> : p_sel_comb
<a name="223"><q-n>     223  </q-n></a>      sel_dec0 = 1'b0;
<a name="224"><q-n>     224  </q-n></a>      sel_dec1 = 1'b0;
<a name="225"><q-n>     225  </q-n></a>      sel_dft_slv = 1'b0;
<a name="226"><q-n>     226  </q-n></a>
<a name="227"><q-n>     227  </q-n></a>      <q-w>if</q-w> (sel_dec)
<a name="228"><q-n>     228  </q-n></a>        <q-w>case</q-w> (addr_out_port)
<a name="229"><q-n>     229  </q-n></a>          3'b000 : sel_dec0 = 1'b1;
<a name="230"><q-n>     230  </q-n></a>          3'b001 : sel_dec1 = 1'b1;
<a name="231"><q-n>     231  </q-n></a>          3'b100 : sel_dft_slv = 1'b1;    <q-m>// Select the default slave</q-m>
<a name="232"><q-n>     232  </q-n></a>          <q-w>default</q-w> : <q-w>begin</q-w>
<a name="233"><q-n>     233  </q-n></a>            sel_dec0 = 1'bx;
<a name="234"><q-n>     234  </q-n></a>            sel_dec1 = 1'bx;
<a name="235"><q-n>     235  </q-n></a>            sel_dft_slv = 1'bx;
<a name="236"><q-n>     236  </q-n></a>          <q-w>end</q-w>
<a name="237"><q-n>     237  </q-n></a>        <q-w>endcase</q-w> <q-m>// case(addr_out_port)</q-m>
<a name="238"><q-n>     238  </q-n></a>    <q-w>end</q-w> <q-m>// block: p_sel_comb</q-m>
<a name="239"><q-n>     239  </q-n></a>
<a name="240"><q-n>     240  </q-n></a><q-m>// The decoder selects the appropriate active_dec signal depending on which</q-m>
<a name="241"><q-n>     241  </q-n></a><q-m>//  output stage is required for the transfer.</q-m>
<a name="242"><q-n>     242  </q-n></a>  <q-w>always</q-w> @ (
<a name="243"><q-n>     243  </q-n></a>             active_dec0 <q-t>or</q-w>
<a name="244"><q-n>     244  </q-n></a>             active_dec1 <q-t>or</q-w>
<a name="245"><q-n>     245  </q-n></a>             addr_out_port
<a name="246"><q-n>     246  </q-n></a>           )
<a name="247"><q-n>     247  </q-n></a>    <q-w>begin</q-w> : p_active_comb
<a name="248"><q-n>     248  </q-n></a>      <q-w>case</q-w> (addr_out_port)
<a name="249"><q-n>     249  </q-n></a>        3'b000 : active_dec = active_dec0;
<a name="250"><q-n>     250  </q-n></a>        3'b001 : active_dec = active_dec1;
<a name="251"><q-n>     251  </q-n></a>        3'b100 : active_dec = 1'b1;         <q-m>// Select the default slave</q-m>
<a name="252"><q-n>     252  </q-n></a>        <q-w>default</q-w> : active_dec = 1'bx;
<a name="253"><q-n>     253  </q-n></a>      <q-w>endcase</q-w> <q-m>// case(addr_out_port)</q-m>
<a name="254"><q-n>     254  </q-n></a>    <q-w>end</q-w> <q-m>// block: p_active_comb</q-m>
<a name="255"><q-n>     255  </q-n></a>
<a name="256"><q-n>     256  </q-n></a>
<a name="257"><q-n>     257  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="258"><q-n>     258  </q-n></a><q-m>// Data phase signals</q-m>
<a name="259"><q-n>     259  </q-n></a><q-m>//------------------------------------------------------------------------------</q-m>
<a name="260"><q-n>     260  </q-n></a>
<a name="261"><q-n>     261  </q-n></a><q-m>// The data_out_port needs to be updated when HREADY from the input stage is high.</q-m>
<a name="262"><q-n>     262  </q-n></a><q-m>//  Note: HREADY must be used, not HREADYOUT, because there are occaisions</q-m>
<a name="263"><q-n>     263  </q-n></a><q-m>//  (namely when the holding register gets loaded) when HREADYOUT may be low</q-m>
<a name="264"><q-n>     264  </q-n></a><q-m>//  but HREADY is high, and in this case it is important that the data_out_port</q-m>
<a name="265"><q-n>     265  </q-n></a><q-m>//  gets updated.</q-m>
<a name="266"><q-n>     266  </q-n></a>
<a name="267"><q-n>     267  </q-n></a>  <q-w>always</q-w> @ (<q-a>negedge</q-w> HRESETn <q-t>or</q-w> <q-a>posedge</q-w> HCLK)
<a name="268"><q-n>     268  </q-n></a>    <q-w>begin</q-w> : p_data_out_port_seq
<a name="269"><q-n>     269  </q-n></a>      <q-w>if</q-w> (~HRESETn)
<a name="270"><q-n>     270  </q-n></a>        data_out_port &lt;= {3{1'b0}};
<a name="271"><q-n>     271  </q-n></a>      <q-w>else</q-w>
<a name="272"><q-n>     272  </q-n></a>        <q-w>if</q-w> (HREADYS)
<a name="273"><q-n>     273  </q-n></a>          data_out_port &lt;= addr_out_port;
<a name="274"><q-n>     274  </q-n></a>    <q-w>end</q-w> <q-m>// block: p_data_out_port_seq</q-m>
<a name="275"><q-n>     275  </q-n></a>
<a name="276"><q-n>     276  </q-n></a>  <q-m>// HREADYOUTS output decode</q-m>
<a name="277"><q-n>     277  </q-n></a>  <q-w>always</q-w> @ (
<a name="278"><q-n>     278  </q-n></a>             readyout_dft_slv <q-t>or</q-w>
<a name="279"><q-n>     279  </q-n></a>             readyout_dec0 <q-t>or</q-w>
<a name="280"><q-n>     280  </q-n></a>             readyout_dec1 <q-t>or</q-w>
<a name="281"><q-n>     281  </q-n></a>             data_out_port
<a name="282"><q-n>     282  </q-n></a>           )
<a name="283"><q-n>     283  </q-n></a>  <q-w>begin</q-w> : p_ready_comb
<a name="284"><q-n>     284  </q-n></a>    <q-w>case</q-w> (data_out_port)
<a name="285"><q-n>     285  </q-n></a>      3'b000 : HREADYOUTS = readyout_dec0;
<a name="286"><q-n>     286  </q-n></a>      3'b001 : HREADYOUTS = readyout_dec1;
<a name="287"><q-n>     287  </q-n></a>      3'b100 : HREADYOUTS = readyout_dft_slv;    <q-m>// Select the default slave</q-m>
<a name="288"><q-n>     288  </q-n></a>      <q-w>default</q-w> : HREADYOUTS = 1'bx;
<a name="289"><q-n>     289  </q-n></a>    <q-w>endcase</q-w> <q-m>// case(data_out_port)</q-m>
<a name="290"><q-n>     290  </q-n></a>  <q-w>end</q-w> <q-m>// block: p_ready_comb</q-m>
<a name="291"><q-n>     291  </q-n></a>
<a name="292"><q-n>     292  </q-n></a>  <q-m>// HRESPS output decode</q-m>
<a name="293"><q-n>     293  </q-n></a>  <q-w>always</q-w> @ (
<a name="294"><q-n>     294  </q-n></a>             resp_dft_slv <q-t>or</q-w>
<a name="295"><q-n>     295  </q-n></a>             resp_dec0 <q-t>or</q-w>
<a name="296"><q-n>     296  </q-n></a>             resp_dec1 <q-t>or</q-w>
<a name="297"><q-n>     297  </q-n></a>             data_out_port
<a name="298"><q-n>     298  </q-n></a>           )
<a name="299"><q-n>     299  </q-n></a>  <q-w>begin</q-w> : p_resp_comb
<a name="300"><q-n>     300  </q-n></a>    <q-w>case</q-w> (data_out_port)
<a name="301"><q-n>     301  </q-n></a>      3'b000 : HRESPS = resp_dec0;
<a name="302"><q-n>     302  </q-n></a>      3'b001 : HRESPS = resp_dec1;
<a name="303"><q-n>     303  </q-n></a>      3'b100 : HRESPS = resp_dft_slv;     <q-m>// Select the default slave</q-m>
<a name="304"><q-n>     304  </q-n></a>      <q-w>default</q-w> : HRESPS = {2{1'bx}};
<a name="305"><q-n>     305  </q-n></a>    <q-w>endcase</q-w> <q-m>// case (data_out_port)</q-m>
<a name="306"><q-n>     306  </q-n></a>  <q-w>end</q-w> <q-m>// block: p_resp_comb</q-m>
<a name="307"><q-n>     307  </q-n></a>
<a name="308"><q-n>     308  </q-n></a>  <q-m>// HRDATAS output decode</q-m>
<a name="309"><q-n>     309  </q-n></a>  <q-w>always</q-w> @ (
<a name="310"><q-n>     310  </q-n></a>             rdata_dec0 <q-t>or</q-w>
<a name="311"><q-n>     311  </q-n></a>             rdata_dec1 <q-t>or</q-w>
<a name="312"><q-n>     312  </q-n></a>             data_out_port
<a name="313"><q-n>     313  </q-n></a>           )
<a name="314"><q-n>     314  </q-n></a>  <q-w>begin</q-w> : p_rdata_comb
<a name="315"><q-n>     315  </q-n></a>    <q-w>case</q-w> (data_out_port)
<a name="316"><q-n>     316  </q-n></a>      3'b000 : HRDATAS = rdata_dec0;
<a name="317"><q-n>     317  </q-n></a>      3'b001 : HRDATAS = rdata_dec1;
<a name="318"><q-n>     318  </q-n></a>      3'b100 : HRDATAS = {32{1'b0}};   <q-m>// Select the default slave</q-m>
<a name="319"><q-n>     319  </q-n></a>      <q-w>default</q-w> : HRDATAS = {32{1'bx}};
<a name="320"><q-n>     320  </q-n></a>    <q-w>endcase</q-w> <q-m>// case (data_out_port)</q-m>
<a name="321"><q-n>     321  </q-n></a>  <q-w>end</q-w> <q-m>// block: p_rdata_comb</q-m>
<a name="322"><q-n>     322  </q-n></a>
<a name="323"><q-n>     323  </q-n></a>  <q-m>// HRUSERS output decode</q-m>
<a name="324"><q-n>     324  </q-n></a>  <q-w>always</q-w> @ (
<a name="325"><q-n>     325  </q-n></a>             ruser_dec0 <q-t>or</q-w>
<a name="326"><q-n>     326  </q-n></a>             ruser_dec1 <q-t>or</q-w>
<a name="327"><q-n>     327  </q-n></a>             data_out_port
<a name="328"><q-n>     328  </q-n></a>           )
<a name="329"><q-n>     329  </q-n></a>  <q-w>begin</q-w> : p_ruser_comb
<a name="330"><q-n>     330  </q-n></a>    <q-w>case</q-w> (data_out_port)
<a name="331"><q-n>     331  </q-n></a>      3'b000 : HRUSERS = ruser_dec0;
<a name="332"><q-n>     332  </q-n></a>      3'b001 : HRUSERS = ruser_dec1;
<a name="333"><q-n>     333  </q-n></a>      3'b100 : HRUSERS = {32{1'b0}};   <q-m>// Select the default slave</q-m>
<a name="334"><q-n>     334  </q-n></a>      <q-w>default</q-w> : HRUSERS = {32{1'bx}};
<a name="335"><q-n>     335  </q-n></a>    <q-w>endcase</q-w> <q-m>// case (data_out_port)</q-m>
<a name="336"><q-n>     336  </q-n></a>  <q-w>end</q-w> <q-m>// block: p_ruser_comb</q-m>
<a name="337"><q-n>     337  </q-n></a>
<a name="338"><q-n>     338  </q-n></a>
<a name="339"><q-n>     339  </q-n></a><q-w>endmodule</q-w>
<a name="340"><q-n>     340  </q-n></a>
<a name="341"><q-n>     341  </q-n></a><q-m>// --================================= End ===================================--</q-m>
</pre>
</tt>

  
</body>
</html>
