
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_slave_agent.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * Abstract:</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * ahb_slv_agent contains slave driver, slave sequencer and slave monitor.</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> * It also contains configurations for agent.</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> *</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m> */</q-m>
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a>`ifndef AHB_SLAVE_AGENT
<a name="16"><q-n>     16  </q-n></a>`<q-a>define</q-w> AHB_SLAVE_AGENT
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a><q-w>class</q-w> ahb_slv_agent <q-w>extends</q-w> uvm_agent;
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>  <q-m>/** configuration class instance */</q-m>
<a name="21"><q-n>     21  </q-n></a>  ahb_slv_agent_cfg slv_agent_cfg;
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>  <q-m>/** factory registration */</q-m>
<a name="24"><q-n>     24  </q-n></a>  `uvm_component_param_utils(ahb_slv_agent)
<a name="25"><q-n>     25  </q-n></a>
<a name="26"><q-n>     26  </q-n></a>  <q-m>/** component handles(sequencer, driver, monitor, checker) */</q-m>
<a name="27"><q-n>     27  </q-n></a>  ahb_slv_seqr     slv_seqr_h;
<a name="28"><q-n>     28  </q-n></a>  ahb_slv_drv      slv_drv_h;
<a name="29"><q-n>     29  </q-n></a>  ahb_slv_mon      slv_mon_h;
<a name="30"><q-n>     30  </q-n></a>  <q-m>//ahb_slv_checker  slv_chk_h;</q-m>
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a>  <q-m>/** virtual interface */</q-m>
<a name="33"><q-n>     33  </q-n></a>  <q-w>virtual</q-w> ahb_slv_inf slv_vif;
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="36"><q-n>     36  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"ahb_slv_agent"</q-l>, uvm_component parent = <q-w>null</q-w>);
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>  <q-m>/** build phase */</q-m>
<a name="39"><q-n>     39  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a>  <q-m>/** connect phase */</q-m>
<a name="42"><q-n>     42  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> connect_phase(uvm_phase phase);
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a><q-w>endclass</q-w> : ahb_slv_agent
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="47"><q-n>     47  </q-n></a><q-m>//methods</q-m>
<a name="48"><q-n>     48  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="49"><q-n>     49  </q-n></a>
<a name="50"><q-n>     50  </q-n></a><q-m>/** class constructor */</q-m>
<a name="51"><q-n>     51  </q-n></a><q-w>function</q-w> ahb_slv_agent::<q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"ahb_slv_agent"</q-l>, uvm_component parent = <q-w>null</q-w>);
<a name="52"><q-n>     52  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="53"><q-n>     53  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a><q-m>/** build_phase - create slave seuqencer, slave driver, slave monitor */</q-m>
<a name="56"><q-n>     56  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_slv_agent::build_phase(uvm_phase phase);
<a name="57"><q-n>     57  </q-n></a> 
<a name="58"><q-n>     58  </q-n></a>  <q-m>/** get the slave agent configurations */</q-m>
<a name="59"><q-n>     59  </q-n></a>  <q-w>if</q-w> (!uvm_config_db#(ahb_slv_agent_cfg)::get(<q-w>this</q-w>, <q-l>""</q-l>, <q-l>"slv_agent_cfg"</q-l>, slv_agent_cfg))
<a name="60"><q-n>     60  </q-n></a>    `uvm_fatal(get_full_name(), <q-l>"Not Able To Get The Slave Agent Configurations!!!"</q-l>)
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a>  <q-m>/** create slave sequencer, slave driver, slave monitor */</q-m>
<a name="63"><q-n>     63  </q-n></a>  <q-w>if</q-w> (slv_agent_cfg.is_active == UVM_ACTIVE) <q-w>begin</q-w>
<a name="64"><q-n>     64  </q-n></a>    slv_seqr_h = ahb_slv_seqr::type_id::create(<q-l>"slv_seqr_h"</q-l>, <q-w>this</q-w>);
<a name="65"><q-n>     65  </q-n></a>    slv_drv_h  = ahb_slv_drv::type_id::create(<q-l>"slv_drv_h"</q-l>, <q-w>this</q-w>);
<a name="66"><q-n>     66  </q-n></a>  <q-w>end</q-w>
<a name="67"><q-n>     67  </q-n></a> 
<a name="68"><q-n>     68  </q-n></a>  <q-m>/** create master monitor */</q-m>
<a name="69"><q-n>     69  </q-n></a>  slv_mon_h = ahb_slv_mon::type_id::create(<q-l>"slv_mon_h"</q-l>, <q-w>this</q-w>);
<a name="70"><q-n>     70  </q-n></a>
<a name="71"><q-n>     71  </q-n></a>  <q-m>/** create master checker */</q-m>
<a name="72"><q-n>     72  </q-n></a>  <q-m>//if (slv_agent_cfg.is_enable == ENABLE)</q-m>
<a name="73"><q-n>     73  </q-n></a>    <q-m>//slv_chk_h = ahb_slv_checker::type_id::create("slv_chk_h", this);</q-m>
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>  <q-m>/** get interface for slave */</q-m>
<a name="76"><q-n>     76  </q-n></a>  <q-w>if</q-w> (!uvm_config_db#(<q-w>virtual</q-w> ahb_slv_inf)::get(<q-w>this</q-w>, <q-l>""</q-l>, <q-l>"slv_vif"</q-l>, slv_vif))
<a name="77"><q-n>     77  </q-n></a>    `uvm_fatal(get_full_name(), <q-l>"Not Able To Get The Interface!!!"</q-l>)
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a><q-w>endfunction</q-w> : build_phase
<a name="80"><q-n>     80  </q-n></a>
<a name="81"><q-n>     81  </q-n></a><q-m>/** connect phase - connect slave sequencer and slave driver also slave monitor</q-m>
<a name="82"><q-n>     82  </q-n></a><q-m> *  to slave sequencer for reactive support. passing interface to monitor and </q-m>
<a name="83"><q-n>     83  </q-n></a><q-m> *  driver.</q-m>
<a name="84"><q-n>     84  </q-n></a><q-m> */</q-m>
<a name="85"><q-n>     85  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_slv_agent::connect_phase(uvm_phase phase);
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>  <q-w>if</q-w> (slv_agent_cfg.is_active == UVM_ACTIVE) <q-w>begin</q-w>
<a name="88"><q-n>     88  </q-n></a>    slv_drv_h.seq_item_port.connect(slv_seqr_h.seq_item_export);
<a name="89"><q-n>     89  </q-n></a>    slv_drv_h.slv_vif  = slv_vif;
<a name="90"><q-n>     90  </q-n></a>    slv_mon_h.slv_ap_mon.connect(slv_seqr_h.item_export);
<a name="91"><q-n>     91  </q-n></a>  <q-w>end</q-w>
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>  slv_mon_h.slv_vif = slv_vif;
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a>  <q-m>//if (slv_agent_cfg.is_enable == ENABLE) slv_mon_h.slv_ap_ch.connect(slv_chk_h.slv_ai_ch);</q-m>
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a><q-w>endfunction</q-w> : connect_phase
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a>`<q-a>endif</q-w>  <q-m>//AHB_SLAVE_AGENT</q-m>
</pre>
</tt>

  
</body>
</html>
