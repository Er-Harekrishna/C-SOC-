
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- AHB_master_monitor.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//  EDITED_BY :- Pradip Prajapati</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>`ifndef SRAMS_MONITOR
<a name="10"><q-n>     10  </q-n></a>`<q-a>define</q-w> SRAMS_MONITOR
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a><q-w>class</q-w> sram_monitor <q-w>extends</q-w> uvm_monitor;
<a name="13"><q-n>     13  </q-n></a> 
<a name="14"><q-n>     14  </q-n></a>  <q-m>/** factory registration */</q-m>
<a name="15"><q-n>     15  </q-n></a>  `uvm_component_utils(sram_monitor)
<a name="16"><q-n>     16  </q-n></a>  
<a name="17"><q-n>     17  </q-n></a>  <q-m>/** virtual interface handle */</q-m>
<a name="18"><q-n>     18  </q-n></a>  <q-w>virtual</q-w> sram_inf vif;
<a name="19"><q-n>     19  </q-n></a>  
<a name="20"><q-n>     20  </q-n></a>  <q-m>/** transaction handle */</q-m>
<a name="21"><q-n>     21  </q-n></a>  sram_transaction strans_h;
<a name="22"><q-n>     22  </q-n></a>  
<a name="23"><q-n>     23  </q-n></a>  <q-m>/** analysis port */</q-m>
<a name="24"><q-n>     24  </q-n></a>  uvm_analysis_port#(sram_transaction) item_collected_port;
<a name="25"><q-n>     25  </q-n></a>  
<a name="26"><q-n>     26  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="27"><q-n>     27  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"sram_monitor"</q-l>,uvm_component parent);
<a name="28"><q-n>     28  </q-n></a>  
<a name="29"><q-n>     29  </q-n></a>  <q-m>/** build phase */</q-m>
<a name="30"><q-n>     30  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="31"><q-n>     31  </q-n></a>  
<a name="32"><q-n>     32  </q-n></a>  <q-m>/** run phase */</q-m>
<a name="33"><q-n>     33  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="34"><q-n>     34  </q-n></a>  
<a name="35"><q-n>     35  </q-n></a>  <q-m>/** sample method */</q-m>
<a name="36"><q-n>     36  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> sample();
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a><q-w>endclass</q-w> : sram_monitor
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a><q-m>/** class constructor */</q-m>
<a name="41"><q-n>     41  </q-n></a><q-w>function</q-w> sram_monitor::<q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"sram_monitor"</q-l>,uvm_component parent);
<a name="42"><q-n>     42  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="43"><q-n>     43  </q-n></a>  item_collected_port = <q-w>new</q-w>(<q-l>"item_collected_port"</q-l>,<q-w>this</q-w>);
<a name="44"><q-n>     44  </q-n></a><q-w>endfunction</q-w>
<a name="45"><q-n>     45  </q-n></a> 
<a name="46"><q-n>     46  </q-n></a><q-m>/** build phase */</q-m>
<a name="47"><q-n>     47  </q-n></a><q-w>function</q-w> <q-w>void</q-w> sram_monitor::build_phase(uvm_phase phase);
<a name="48"><q-n>     48  </q-n></a>  <q-w>super</q-w>.build_phase(phase);
<a name="49"><q-n>     49  </q-n></a>
<a name="50"><q-n>     50  </q-n></a>  <q-m>//strans_h = sram_transaction::type_id::create("stran_h");</q-m>
<a name="51"><q-n>     51  </q-n></a>      
<a name="52"><q-n>     52  </q-n></a>  <q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> sram_inf)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"sram_if"</q-l>,vif))
<a name="53"><q-n>     53  </q-n></a>    `uvm_error(get_type_name(),<q-l>"Not able to get the sram interface"</q-l>);
<a name="54"><q-n>     54  </q-n></a><q-w>endfunction</q-w>
<a name="55"><q-n>     55  </q-n></a>    
<a name="56"><q-n>     56  </q-n></a><q-m>/** run phase */</q-m>
<a name="57"><q-n>     57  </q-n></a><q-w>task</q-w> sram_monitor::run_phase(uvm_phase phase);
<a name="58"><q-n>     58  </q-n></a>  <q-w>super</q-w>.run_phase(phase);
<a name="59"><q-n>     59  </q-n></a>  @(<q-a>posedge</q-w> vif.HCLK)
<a name="60"><q-n>     60  </q-n></a>  <q-w>wait</q-w>(vif.SRAMCS);
<a name="61"><q-n>     61  </q-n></a>  strans_h = sram_transaction::type_id::create(<q-l>"strans_h"</q-l>);
<a name="62"><q-n>     62  </q-n></a>  sample();
<a name="63"><q-n>     63  </q-n></a>  item_collected_port.write(strans_h);
<a name="64"><q-n>     64  </q-n></a><q-w>endtask</q-w>
<a name="65"><q-n>     65  </q-n></a>    
<a name="66"><q-n>     66  </q-n></a><q-w>function</q-w> <q-w>void</q-w> sram_monitor::sample();
<a name="67"><q-n>     67  </q-n></a>  strans_h.SRAMADATA = vif.SRAMADDR;
<a name="68"><q-n>     68  </q-n></a>  strans_h.SRAMWDATA = vif.SRAMWDATA;
<a name="69"><q-n>     69  </q-n></a>  strans_h.SRAMRDATA = vif.SRAMRDATA;
<a name="70"><q-n>     70  </q-n></a>  strans_h.SRAMWREN  = vif.SRAMWEN;
<a name="71"><q-n>     71  </q-n></a><q-w>endfunction</q-w>
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>`<q-a>endif</q-w>
</pre>
</tt>

  
</body>
</html>
