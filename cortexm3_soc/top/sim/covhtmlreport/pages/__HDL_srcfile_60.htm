
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  FILE_NAME :- ahb_inf.sv</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * AHB interface which can be used to connect the VIP to the DUT.</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * A top level interface ahb_if is defined. The top level interface</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> * contains reset signal for the bus, and an array of master </q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> * &amp; slave interfaces. The top level interface can be used for connecting the</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m> * master &amp; slave components to the AHB Bus. By default, The number of master</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m> * and slave interfaces in top level interface can be controlled using macros </q-m>
<a name="15"><q-n>     15  </q-n></a><q-m> * AHB_MAX_NUM_MASTERS_{0...} and AHB_MAX_NUM_SLAVES_{0...} respectively. </q-m>
<a name="16"><q-n>     16  </q-n></a><q-m> * For example, if you want to use 2 master interfaces and 2 slave interfaces, </q-m>
<a name="17"><q-n>     17  </q-n></a><q-m> * you can define following macros when compiling the VIP:</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m> * AHB_MAX_NUM_MASTERS 2</q-m>
<a name="19"><q-n>     19  </q-n></a><q-m> * AHB_MAX_NUM_SLAVES  2 </q-m>
<a name="20"><q-n>     20  </q-n></a><q-m> *</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m> */</q-m>
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>`ifndef AHB_INTERFACE
<a name="24"><q-n>     24  </q-n></a>`<q-a>define</q-w> AHB_INTERFACE
<a name="25"><q-n>     25  </q-n></a>
<a name="26"><q-n>     26  </q-n></a>`<q-i>include</q-w> <q-l>"ahb_assertion.sv"</q-l>
<a name="27"><q-n>     27  </q-n></a>`<q-i>include</q-w> <q-l>"ahb_master_inf.sv"</q-l>
<a name="28"><q-n>     28  </q-n></a>`<q-i>include</q-w> <q-l>"ahb_slave_inf.sv"</q-l>
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a><q-w>interface</q-w> ahb_inf ();
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a>  <q-w>logic</q-w> hclk;	
<a name="33"><q-n>     33  </q-n></a>  <q-w>logic</q-w> hresetn;
<a name="34"><q-n>     34  </q-n></a>  
<a name="35"><q-n>     35  </q-n></a>  <q-m>/* AHB_MAX_NUM_MASTERS_0 defines there are no master interface </q-m>
<a name="36"><q-n>     36  </q-n></a><q-m>   */</q-m>
<a name="37"><q-n>     37  </q-n></a>  `ifndef AHB_MAX_NUM_MASTERS_0
<a name="38"><q-n>     38  </q-n></a>    ahb_mas_inf  mas_if[`AHB_MAX_NUM_MASTERS](hclk,hresetn);
<a name="39"><q-n>     39  </q-n></a>  `<q-a>endif</q-w>
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a>  <q-m>/* AHB_MAX_NUM_SLAVES_0 defines there are no slave interface </q-m>
<a name="42"><q-n>     42  </q-n></a><q-m>   */</q-m>
<a name="43"><q-n>     43  </q-n></a>  `ifndef AHB_MAX_NUM_SLAVES_0  
<a name="44"><q-n>     44  </q-n></a>    ahb_slv_inf  slv_if[`AHB_MAX_NUM_SLAVES](hclk,hresetn);
<a name="45"><q-n>     45  </q-n></a>  `<q-a>endif</q-w>
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>  <q-m>/* reset task - used for applying reset in between </q-m>
<a name="48"><q-n>     48  </q-n></a><q-m>   * rst_delay indicates the time before applying reset after calling reset</q-m>
<a name="49"><q-n>     49  </q-n></a><q-m>   * and no_of_rst_cycles defines number of cycles reset is asserted.</q-m>
<a name="50"><q-n>     50  </q-n></a><q-m>   */</q-m>
<a name="51"><q-n>     51  </q-n></a>  <q-w>task</q-w> reset(<q-w>int</q-w> rst_delay,<q-w>int</q-w> no_of_rst_cycle);
<a name="52"><q-n>     52  </q-n></a> 
<a name="53"><q-n>     53  </q-n></a>    #(rst_delay);	  
<a name="54"><q-n>     54  </q-n></a>    hresetn = 0;
<a name="55"><q-n>     55  </q-n></a>    <q-w>repeat</q-w>(no_of_rst_cycle)
<a name="56"><q-n>     56  </q-n></a>      @(<q-a>posedge</q-w> hclk);
<a name="57"><q-n>     57  </q-n></a>    hresetn = 1;    
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>  <q-w>endtask</q-w> : reset
<a name="60"><q-n>     60  </q-n></a>  
<a name="61"><q-n>     61  </q-n></a><q-w>endinterface</q-w> : ahb_inf
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>`<q-a>endif</q-w> <q-m>//AHB_INTERFACE</q-m>
</pre>
</tt>

  
</body>
</html>
