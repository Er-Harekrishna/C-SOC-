
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_base_test.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * Abstract:</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * This file creates test 'ahb_base_test', which is extended from the</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> * uvm_test class.</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> *</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m> * In the build phase of the test we will set the necessary test related</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m> * information:</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m> *  - System config for configuration whole envionment</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m> *  - Create environment</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m> *</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m> */</q-m>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>`ifndef AHB_BASE_TEST
<a name="21"><q-n>     21  </q-n></a>`<q-a>define</q-w> AHB_BASE_TEST
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a><q-w>class</q-w> ahb_base_test <q-w>extends</q-w> uvm_test;
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>  <q-m>/** factory registration */</q-m>
<a name="26"><q-n>     26  </q-n></a>  `uvm_component_utils(ahb_base_test)
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>  <q-m>/** environment handle - uvc environment */</q-m>
<a name="29"><q-n>     29  </q-n></a>  ahb_env                           env_h;
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>  <q-m>/** system configuration handle - for passing the system configuration */</q-m>
<a name="32"><q-n>     32  </q-n></a>  ahb_system_config                 sys_cfg;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>  <q-m>/** virtual interface */</q-m>
<a name="35"><q-n>     35  </q-n></a>  <q-w>virtual</q-w> ahb_inf vif;
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="38"><q-n>     38  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"ahb_test"</q-l>, uvm_component parent = <q-w>null</q-w>);
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>  <q-m>/** build phase*/</q-m>
<a name="41"><q-n>     41  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>  <q-m>/** end of elaboration phase */</q-m>
<a name="44"><q-n>     44  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> end_of_elaboration_phase(uvm_phase phase);
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>  <q-m>/** run phase */</q-m>
<a name="47"><q-n>     47  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a><q-w>endclass</q-w> : ahb_base_test
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="52"><q-n>     52  </q-n></a><q-m>//methods</q-m>
<a name="53"><q-n>     53  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a><q-m>/** class constructor */</q-m>
<a name="56"><q-n>     56  </q-n></a><q-w>function</q-w> ahb_base_test::<q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"ahb_test"</q-l>, uvm_component parent = <q-w>null</q-w>);
<a name="57"><q-n>     57  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="58"><q-n>     58  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a><q-m>/** build_phase */</q-m>
<a name="61"><q-n>     61  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_base_test::build_phase(uvm_phase phase);
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>  <q-m>/** Creating the configuration class for UVC */</q-m>	
<a name="64"><q-n>     64  </q-n></a>  sys_cfg = ahb_system_config::type_id::create(<q-l>"sys_cfg"</q-l>);
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>  <q-m>/** Creating environment class for UVC */</q-m>
<a name="67"><q-n>     67  </q-n></a>  env_h   = ahb_env::type_id::create(<q-l>"env_h"</q-l>, <q-w>this</q-w>);
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>  <q-m>/** From system configuration class environment related configurations are</q-m>
<a name="70"><q-n>     70  </q-n></a><q-m>   *  passed to the environment handle env_h from ahb_base_test. </q-m>
<a name="71"><q-n>     71  </q-n></a><q-m>   */</q-m>
<a name="72"><q-n>     72  </q-n></a>  uvm_config_db#(ahb_env_config)::set(<q-w>this</q-w>, <q-l>"env_h"</q-l>, <q-l>"env_cfg"</q-l>, sys_cfg.env_cfg);
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a>  <q-w>if</q-w>(!(uvm_config_db#(<q-w>virtual</q-w> ahb_inf)::get(<q-w>null</q-w>,<q-l>""</q-l>,<q-l>"inf"</q-l>,vif)))
<a name="75"><q-n>     75  </q-n></a>    `uvm_fatal(get_type_name(),<q-l>"Failed to get interface in the base test!!"</q-l>)
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a><q-w>endfunction</q-w> : build_phase
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a><q-m>/** end of elaboration phase */</q-m>
<a name="80"><q-n>     80  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_base_test::end_of_elaboration_phase(uvm_phase phase);
<a name="81"><q-n>     81  </q-n></a>  <q-m>/** topology */</q-m>
<a name="82"><q-n>     82  </q-n></a>  uvm_top.print_topology();
<a name="83"><q-n>     83  </q-n></a><q-w>endfunction</q-w> : end_of_elaboration_phase
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a><q-w>task</q-w> ahb_base_test::run_phase(uvm_phase phase);
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>  phase.raise_objection(<q-w>this</q-w>);
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>   <q-m>/* forever begin   </q-m>
<a name="90"><q-n>     90  </q-n></a><q-m>      fork</q-m>
<a name="91"><q-n>     91  </q-n></a><q-m>        begin*/</q-m>  
<a name="92"><q-n>     92  </q-n></a>          <q-w>wait</q-w>(cortexm3_soc_tb.cortexm3_soc_i0.cmsdk_fpga_sram_A.BRAM0['h3fc][1:0]===2'b11);
<a name="93"><q-n>     93  </q-n></a>      <q-m>/*  end</q-m>
<a name="94"><q-n>     94  </q-n></a><q-m></q-m>
<a name="95"><q-n>     95  </q-n></a><q-m>        begin               </q-m>
<a name="96"><q-n>     96  </q-n></a><q-m>          wait(cortexm3_soc_tb.cortexm3_soc_i0.cmsdk_fpga_sram_A.BRAM0['h3fc][3]===1'b1);  </q-m>
<a name="97"><q-n>     97  </q-n></a><q-m>          cortexm3_soc_tb.cortexm3_soc_i0.cmsdk_fpga_sram_A.BRAM0['h3fc][3]=1'b0;  </q-m>
<a name="98"><q-n>     98  </q-n></a><q-m>          cortexm3_soc_tb.HRESETn = 0;</q-m>
<a name="99"><q-n>     99  </q-n></a><q-m>          #150 cortexm3_soc_tb.HRESETn = 1;</q-m>
<a name="100"><q-n>     100  </q-n></a><q-m>        end</q-m>
<a name="101"><q-n>     101  </q-n></a><q-m>      join_any</q-m>
<a name="102"><q-n>     102  </q-n></a><q-m>      disable fork;</q-m>
<a name="103"><q-n>     103  </q-n></a><q-m>      if(cortexm3_soc_tb.cortexm3_soc_i0.cmsdk_fpga_sram_A.BRAM0['h3fc][1:0]===2'b11) </q-m>
<a name="104"><q-n>     104  </q-n></a><q-m>        break;</q-m>
<a name="105"><q-n>     105  </q-n></a><q-m>    end*/</q-m>
<a name="106"><q-n>     106  </q-n></a> 
<a name="107"><q-n>     107  </q-n></a>  phase.drop_objection(<q-w>this</q-w>);
<a name="108"><q-n>     108  </q-n></a>  <q-m>//phase.phase_done.set_drain_time(this,8000ns);</q-m>
<a name="109"><q-n>     109  </q-n></a>
<a name="110"><q-n>     110  </q-n></a><q-w>endtask</q-w> : run_phase
<a name="111"><q-n>     111  </q-n></a>
<a name="112"><q-n>     112  </q-n></a>
<a name="113"><q-n>     113  </q-n></a>`<q-a>endif</q-w>  <q-m>//AHB_BASE_TEST</q-m>
</pre>
</tt>

  
</body>
</html>
