
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_base_slave_sequence.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * Abstract:</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * ahb_base_slave_sequence provides API methods and p_sequencer handle. </q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> * every sequences are extends from this sequence. This class defines </q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> * a api medthods to provide memory write and read functionality.</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m> *</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m> * Execution phase: run_phase</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m> * Sequencer: ahb_slv_seqr</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m> *</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m> */</q-m>
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>`ifndef AHB_BASE_SLAVE_SEQUENCE
<a name="20"><q-n>     20  </q-n></a>`<q-a>define</q-w> AHB_BASE_SLAVE_SEQUENCE
<a name="21"><q-n>     21  </q-n></a>
<a name="22"><q-n>     22  </q-n></a><q-w>class</q-w> ahb_base_slave_sequence <q-w>extends</q-w> uvm_sequence #(ahb_slv_trans);
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>  <q-m>/** factroy registration */</q-m>
<a name="25"><q-n>     25  </q-n></a>  `uvm_object_param_utils(ahb_base_slave_sequence)
<a name="26"><q-n>     26  </q-n></a>
<a name="27"><q-n>     27  </q-n></a>  <q-m>/** p sequencer declration */</q-m>
<a name="28"><q-n>     28  </q-n></a>  `uvm_declare_p_sequencer(ahb_slv_seqr)
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="31"><q-n>     31  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_base_slave_sequence"</q-l>);
<a name="32"><q-n>     32  </q-n></a>
<a name="33"><q-n>     33  </q-n></a>  <q-m>/** body method */</q-m>
<a name="34"><q-n>     34  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> body();
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>  <q-m>/** API methods for memory write and read functionality */</q-m>
<a name="37"><q-n>     37  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> write(ahb_slv_trans wr_req);
<a name="38"><q-n>     38  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> read(ahb_slv_trans rd_req);
<a name="39"><q-n>     39  </q-n></a>   
<a name="40"><q-n>     40  </q-n></a><q-w>endclass</q-w> : ahb_base_slave_sequence
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="43"><q-n>     43  </q-n></a><q-m>//methods</q-m>
<a name="44"><q-n>     44  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a><q-m>/** class constructor */</q-m>
<a name="47"><q-n>     47  </q-n></a><q-w>function</q-w> ahb_base_slave_sequence::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_base_slave_sequence"</q-l>);
<a name="48"><q-n>     48  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="49"><q-n>     49  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a><q-m>/** body method */</q-m>
<a name="52"><q-n>     52  </q-n></a><q-w>task</q-w> ahb_base_slave_sequence::body();    
<a name="53"><q-n>     53  </q-n></a>  <q-w>if</q-w>(!$<q-v>cast</q-w>(p_sequencer,m_sequencer))
<a name="54"><q-n>     54  </q-n></a>    `uvm_fatal(get_full_name(),<q-l>"Sequencer Up-Casting Failed!!"</q-l>)          	             
<a name="55"><q-n>     55  </q-n></a><q-w>endtask</q-w> : body
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a><q-m>/** write */</q-m>
<a name="58"><q-n>     58  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_base_slave_sequence::read(ahb_slv_trans rd_req);
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>  <q-m>/** local address and data fields for read */</q-m>
<a name="61"><q-n>     61  </q-n></a>  <q-w>bit</q-w> [`ADDR_WIDTH-1:0] addr;
<a name="62"><q-n>     62  </q-n></a>  <q-w>bit</q-w> [`DATA_WIDTH-1:0] data;
<a name="63"><q-n>     63  </q-n></a>  <q-w>int</q-w> addr_offset;
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a>  <q-m>/** Address and Offset Calculations */</q-m>
<a name="66"><q-n>     66  </q-n></a>  addr = rd_req.HADDR;
<a name="67"><q-n>     67  </q-n></a>  addr_offset = addr - ((<q-w>int</q-w>'(addr/(`DATA_WIDTH/8)))*(`DATA_WIDTH/8));
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>  <q-w>if</q-w>(!rd_req.HWRITE &amp;&amp; !rd_req.hresp_type) <q-w>begin</q-w>
<a name="70"><q-n>     70  </q-n></a>
<a name="71"><q-n>     71  </q-n></a>    `uvm_info(<q-l>"SLAVE SEQUENCE"</q-l>,<q-l>"This Is Read Transfer"</q-l>,UVM_MEDIUM)
<a name="72"><q-n>     72  </q-n></a> 
<a name="73"><q-n>     73  </q-n></a>    <q-m>/** Read Mmeory From Address */</q-m>
<a name="74"><q-n>     74  </q-n></a>    <q-w>if</q-w>(rd_req.htrans_type!=BUSY) <q-w>begin</q-w>
<a name="75"><q-n>     75  </q-n></a>      <q-w>for</q-w>(<q-w>int</q-w> i=0;i&lt;(2**rd_req.hsize_type);i++) <q-w>begin</q-w>
<a name="76"><q-n>     76  </q-n></a>        data[(addr_offset*8) +: 8] = p_sequencer.mem[addr];
<a name="77"><q-n>     77  </q-n></a>	addr_offset++;
<a name="78"><q-n>     78  </q-n></a>        addr++;
<a name="79"><q-n>     79  </q-n></a>      <q-w>end</q-w>
<a name="80"><q-n>     80  </q-n></a>      rd_req.HRDATA = data;
<a name="81"><q-n>     81  </q-n></a>    <q-w>end</q-w>
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>    `uvm_info(<q-l>"SLAVE SEQUENCE"</q-l>,<q-l>"This Slave Sending Transaction To The Sequencer"</q-l>,UVM_MEDIUM)       
<a name="84"><q-n>     84  </q-n></a>    rd_req.print();
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>  <q-w>end</q-w>
<a name="87"><q-n>     87  </q-n></a>    
<a name="88"><q-n>     88  </q-n></a><q-w>endfunction</q-w> : read
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a><q-m>/** read */</q-m>
<a name="91"><q-n>     91  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_base_slave_sequence::write(ahb_slv_trans wr_req);
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>  <q-m>/** local address and data fields for write */</q-m>
<a name="94"><q-n>     94  </q-n></a>  <q-w>bit</q-w> [`ADDR_WIDTH-1:0] addr;
<a name="95"><q-n>     95  </q-n></a>  <q-w>bit</q-w> [`DATA_WIDTH-1:0] data;
<a name="96"><q-n>     96  </q-n></a>  <q-w>int</q-w> addr_offset;
<a name="97"><q-n>     97  </q-n></a>
<a name="98"><q-n>     98  </q-n></a>  p_sequencer.wr_trans_q.push_back(wr_req);
<a name="99"><q-n>     99  </q-n></a>
<a name="100"><q-n>     100  </q-n></a>  <q-w>if</q-w>(!p_sequencer.wr_trans_q[0].HWRITE)
<a name="101"><q-n>     101  </q-n></a>    p_sequencer.wr_trans_q.delete(0);
<a name="102"><q-n>     102  </q-n></a>
<a name="103"><q-n>     103  </q-n></a>  <q-w>if</q-w>(wr_req.hresp_type)
<a name="104"><q-n>     104  </q-n></a>    p_sequencer.wr_trans_q.delete();
<a name="105"><q-n>     105  </q-n></a>
<a name="106"><q-n>     106  </q-n></a>  <q-w>if</q-w>(p_sequencer.wr_trans_q.size()!=0) <q-w>begin</q-w> 
<a name="107"><q-n>     107  </q-n></a>   <q-w>if</q-w>(p_sequencer.wr_trans_q[0].htrans_type==BUSY || p_sequencer.wr_trans_q[0].htrans_type==IDLE)
<a name="108"><q-n>     108  </q-n></a>     p_sequencer.wr_trans_q.delete(0);  
<a name="109"><q-n>     109  </q-n></a>  <q-w>end</q-w>
<a name="110"><q-n>     110  </q-n></a>
<a name="111"><q-n>     111  </q-n></a>  <q-w>if</q-w>($size(p_sequencer.wr_trans_q)==2) <q-w>begin</q-w>
<a name="112"><q-n>     112  </q-n></a>
<a name="113"><q-n>     113  </q-n></a>    addr = p_sequencer.wr_trans_q[0].HADDR;
<a name="114"><q-n>     114  </q-n></a>    addr_offset = addr - ((<q-w>int</q-w>'(addr/(`DATA_WIDTH/8)))*(`DATA_WIDTH/8));
<a name="115"><q-n>     115  </q-n></a>
<a name="116"><q-n>     116  </q-n></a>    <q-w>if</q-w>(p_sequencer.wr_trans_q[0].HWRITE &amp;&amp; !p_sequencer.wr_trans_q[0].hresp_type) <q-w>begin</q-w> 
<a name="117"><q-n>     117  </q-n></a>
<a name="118"><q-n>     118  </q-n></a>      `uvm_info(<q-l>"SLAVE SEQUENCE"</q-l>,<q-l>"This Is Inside Write Transfer"</q-l>,UVM_MEDIUM)
<a name="119"><q-n>     119  </q-n></a>      
<a name="120"><q-n>     120  </q-n></a>      <q-m>/** Write Mmeory From Address */</q-m>
<a name="121"><q-n>     121  </q-n></a>      <q-w>if</q-w>(p_sequencer.wr_trans_q[0].htrans_type!=BUSY) <q-w>begin</q-w>         
<a name="122"><q-n>     122  </q-n></a>	<q-w>for</q-w>(<q-w>int</q-w> i=0;i&lt;(2**p_sequencer.wr_trans_q[0].hsize_type);i++) <q-w>begin</q-w>            
<a name="123"><q-n>     123  </q-n></a>          p_sequencer.mem[addr] = p_sequencer.wr_trans_q[1].HWDATA[(addr_offset*8) +: 8];
<a name="124"><q-n>     124  </q-n></a>	  addr_offset++;
<a name="125"><q-n>     125  </q-n></a>          addr++;
<a name="126"><q-n>     126  </q-n></a>        <q-w>end</q-w>
<a name="127"><q-n>     127  </q-n></a>      <q-w>end</q-w>
<a name="128"><q-n>     128  </q-n></a>    
<a name="129"><q-n>     129  </q-n></a>      `uvm_info(<q-l>"SLAVE SEQUENCE"</q-l>,<q-l>"This Is Slave Sending Transfer To Sequencer"</q-l>,UVM_MEDIUM)       
<a name="130"><q-n>     130  </q-n></a>      wr_req.print();
<a name="131"><q-n>     131  </q-n></a>    									        
<a name="132"><q-n>     132  </q-n></a>      p_sequencer.wr_trans_q.delete(0);
<a name="133"><q-n>     133  </q-n></a>
<a name="134"><q-n>     134  </q-n></a>      <q-w>if</q-w>(p_sequencer.wr_trans_q[0].htrans_type==BUSY)
<a name="135"><q-n>     135  </q-n></a>	p_sequencer.wr_trans_q.delete(0);
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a>    <q-w>end</q-w>
<a name="138"><q-n>     138  </q-n></a>
<a name="139"><q-n>     139  </q-n></a>    <q-w>else</q-w> <q-w>if</q-w>(wr_req.hresp_type) 
<a name="140"><q-n>     140  </q-n></a>      p_sequencer.wr_trans_q.delete();
<a name="141"><q-n>     141  </q-n></a>
<a name="142"><q-n>     142  </q-n></a>  <q-w>end</q-w>
<a name="143"><q-n>     143  </q-n></a>
<a name="144"><q-n>     144  </q-n></a><q-w>endfunction</q-w> : write
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a>`<q-a>endif</q-w> <q-m>//AHB_BASE_SLAVE_SEQUENCE</q-m>
</pre>
</tt>

  
</body>
</html>
