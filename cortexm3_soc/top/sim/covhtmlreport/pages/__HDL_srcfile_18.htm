
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_mas_trans.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//  EDITED_BY :- Rajvi Padaria</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a><q-w>class</q-w> ahb_mas_trans <q-w>extends</q-w> ahb_base_trans;
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a>  <q-m>//master output signals</q-m>
<a name="12"><q-n>     12  </q-n></a>  
<a name="13"><q-n>     13  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w> [(`ADDR_WIDTH-1):0]   HADDR;
<a name="14"><q-n>     14  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w> [(`DATA_WIDTH-1):0]   HWDATA[];
<a name="15"><q-n>     15  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       HWRITE;
<a name="16"><q-n>     16  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w> [(`HPROT_WIDTH-1):0]  HPROT;
<a name="17"><q-n>     17  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       HMASTLOCK;
<a name="18"><q-n>     18  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w> [`HMASTER_WIDTH-1:0]  HMASTER;
<a name="19"><q-n>     19  </q-n></a>  <q-w>rand</q-w> hburst_enum               hburst_type;
<a name="20"><q-n>     20  </q-n></a>  <q-w>rand</q-w> hsize_enum                hsize_type;
<a name="21"><q-n>     21  </q-n></a>  <q-w>rand</q-w> htrans_enum               htrans_type[];
<a name="22"><q-n>     22  </q-n></a>  
<a name="23"><q-n>     23  </q-n></a>  <q-w>bit</q-w>                            HREADY;
<a name="24"><q-n>     24  </q-n></a>  hresp_enum                     hresp_type;
<a name="25"><q-n>     25  </q-n></a> 
<a name="26"><q-n>     26  </q-n></a>  <q-w>rand</q-w> <q-w>int</q-w>                       beat_cnt;
<a name="27"><q-n>     27  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_hsize;
<a name="28"><q-n>     28  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_haddr;
<a name="29"><q-n>     29  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>[2:0]                  no_of_wait;  <q-m>//temp variable for idle transition at the end of burst.</q-m>
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>  <q-w>rand</q-w> <q-w>int</q-w>                       busy_trans_cycles[$];
<a name="32"><q-n>     32  </q-n></a>  <q-w>rand</q-w> htrans_enum               idle_trans_queue[$];
<a name="33"><q-n>     33  </q-n></a>  <q-w>rand</q-w> <q-w>int</q-w>                       index_for_busy_transfer;
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a>  <q-m>/** CALLBACK ENABLE/DISABLE VARIABLE */</q-m>
<a name="36"><q-n>     36  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_hsize_greater_than_width_cb;
<a name="37"><q-n>     37  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_haddr_cross_boundary_cb;
<a name="38"><q-n>     38  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_hsize_change_in_between_burst_cb;
<a name="39"><q-n>     39  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_hburst_change_in_between_burst_cb;
<a name="40"><q-n>     40  </q-n></a>  <q-w>rand</q-w> <q-w>bit</q-w>                       enb_x_value_cb;
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>  <q-m>//enum for HBURST AND HSIZE types</q-m>
<a name="43"><q-n>     43  </q-n></a>  
<a name="44"><q-n>     44  </q-n></a>  <q-w>rand</q-w> <q-w>int</q-w>                       incr_size;
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>  <q-w>int</q-w>                            no_of_beats;
<a name="47"><q-n>     47  </q-n></a>  <q-w>int</q-w>                            no_of_bytes;
<a name="48"><q-n>     48  </q-n></a>  <q-w>int</q-w>                            lower_boundary;
<a name="49"><q-n>     49  </q-n></a>  <q-w>int</q-w>                            addr_boundary;
<a name="50"><q-n>     50  </q-n></a>  <q-w>int</q-w>                            higher_boundary;
<a name="51"><q-n>     51  </q-n></a>  <q-w>int</q-w>                            addr_incr;
<a name="52"><q-n>     52  </q-n></a>  
<a name="53"><q-n>     53  </q-n></a>  <q-m>//factory registration</q-m>
<a name="54"><q-n>     54  </q-n></a>  
<a name="55"><q-n>     55  </q-n></a>  `uvm_object_param_utils_begin(ahb_mas_trans)
<a name="56"><q-n>     56  </q-n></a>      
<a name="57"><q-n>     57  </q-n></a>    `uvm_field_int (HADDR,UVM_ALL_ON)
<a name="58"><q-n>     58  </q-n></a>    `uvm_field_int (HWRITE,UVM_ALL_ON)
<a name="59"><q-n>     59  </q-n></a>    `uvm_field_array_int(HWDATA,UVM_ALL_ON)
<a name="60"><q-n>     60  </q-n></a>    `uvm_field_int (HPROT,UVM_ALL_ON)
<a name="61"><q-n>     61  </q-n></a>    `uvm_field_int (HMASTER,UVM_ALL_ON)
<a name="62"><q-n>     62  </q-n></a>    `uvm_field_int (HMASTLOCK,UVM_ALL_ON)
<a name="63"><q-n>     63  </q-n></a>    `uvm_field_int (HREADY,UVM_ALL_ON)
<a name="64"><q-n>     64  </q-n></a>    `uvm_field_enum(hburst_enum,hburst_type,UVM_ALL_ON)
<a name="65"><q-n>     65  </q-n></a>    `uvm_field_enum(hsize_enum,hsize_type,UVM_ALL_ON)
<a name="66"><q-n>     66  </q-n></a>    `uvm_field_array_enum(htrans_enum,htrans_type,UVM_ALL_ON)
<a name="67"><q-n>     67  </q-n></a>    `uvm_field_enum(hresp_enum,hresp_type,UVM_ALL_ON)
<a name="68"><q-n>     68  </q-n></a>    `uvm_field_int (incr_size,UVM_ALL_ON)
<a name="69"><q-n>     69  </q-n></a>    `uvm_field_int (beat_cnt,UVM_ALL_ON)
<a name="70"><q-n>     70  </q-n></a>    
<a name="71"><q-n>     71  </q-n></a>  `uvm_object_utils_end
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>  <q-m>//address allignement</q-m>
<a name="74"><q-n>     74  </q-n></a>  <q-w>constraint</q-w> allign_addr{ soft HADDR%(2**hsize_type) == 0; soft HADDR&lt;=2048; }
<a name="75"><q-n>     75  </q-n></a>  
<a name="76"><q-n>     76  </q-n></a>  <q-m>/** beat_count_for_hburst - Burst decides how much transfers are there in the burst */</q-m>
<a name="77"><q-n>     77  </q-n></a>  <q-w>constraint</q-w> beat_count_for_hburst{
<a name="78"><q-n>     78  </q-n></a>                                    <q-w>if</q-w>(hburst_type==SINGLE)                        beat_cnt==1;
<a name="79"><q-n>     79  </q-n></a>		        	    <q-w>if</q-w>(hburst_type==INCR)                          beat_cnt==incr_size;
<a name="80"><q-n>     80  </q-n></a>		        	    <q-w>if</q-w>(hburst_type==INCR4  || hburst_type==WRAP4)  beat_cnt==4;
<a name="81"><q-n>     81  </q-n></a>		        	    <q-w>if</q-w>(hburst_type==INCR8  || hburst_type==WRAP8)  beat_cnt==8;
<a name="82"><q-n>     82  </q-n></a>		        	    <q-w>if</q-w>(hburst_type==INCR16 || hburst_type==WRAP16) beat_cnt==16;
<a name="83"><q-n>     83  </q-n></a>                                  }
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a>  <q-m>//soft constranit for no_of_Wait</q-m>
<a name="86"><q-n>     86  </q-n></a>  <q-w>constraint</q-w> no_of_waiit {soft no_of_wait==0;};
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>  <q-m>/** addr_boundary_limit - burst should not generate address which crosses the boundary limit */</q-m> 
<a name="89"><q-n>     89  </q-n></a>  <q-w>constraint</q-w> addr_boundary_limit{ HADDR%1024+(beat_cnt*(2**hsize_type)) &lt;= 4092000; }
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a>  <q-m>/** hsize_less_than_data_width -  hsize should be less than data width */</q-m>
<a name="92"><q-n>     92  </q-n></a>  <q-w>constraint</q-w> hsize_less_than_data_width{ hsize_type &lt;= $clog2(`DATA_WIDTH/8); }
<a name="93"><q-n>     93  </q-n></a> 
<a name="94"><q-n>     94  </q-n></a>  <q-m>/** increment_burst_size - by default the size of the increment burst is 1 */</q-m>
<a name="95"><q-n>     95  </q-n></a>  <q-w>constraint</q-w> increment_burst_size { soft incr_size==1; }
<a name="96"><q-n>     96  </q-n></a>  
<a name="97"><q-n>     97  </q-n></a>  <q-m>/** busy_cycle */</q-m>
<a name="98"><q-n>     98  </q-n></a>  <q-w>constraint</q-w> busy_cycle { busy_trans_cycles.size()==beat_cnt-1; }
<a name="99"><q-n>     99  </q-n></a>  
<a name="100"><q-n>     100  </q-n></a>  <q-m>/** htrans_types - decides the transfer type in burst */</q-m>
<a name="101"><q-n>     101  </q-n></a>  <q-w>constraint</q-w> htrans_types { htrans_type.size() == beat_cnt; 
<a name="102"><q-n>     102  </q-n></a>                            htrans_type[0] == NONSEQ;
<a name="103"><q-n>     103  </q-n></a>		            <q-w>foreach</q-w>(htrans_type[i])
<a name="104"><q-n>     104  </q-n></a>		            { <q-w>if</q-w>(i&gt;0) htrans_type[i] == SEQ;}   
<a name="105"><q-n>     105  </q-n></a>                          } 
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>  <q-m>/** busy_cycles - default number of busy cycles */</q-m>
<a name="108"><q-n>     108  </q-n></a>  <q-w>constraint</q-w> busy_cycles { <q-w>if</q-w>(beat_cnt==1)
<a name="109"><q-n>     109  </q-n></a>                           { <q-w>foreach</q-w>(busy_trans_cycles[i]) 
<a name="110"><q-n>     110  </q-n></a>                               busy_trans_cycles[i]==0;
<a name="111"><q-n>     111  </q-n></a>			   }
<a name="112"><q-n>     112  </q-n></a>			   <q-w>else</q-w>
<a name="113"><q-n>     113  </q-n></a>			   { <q-w>foreach</q-w>(busy_trans_cycles[i])
<a name="114"><q-n>     114  </q-n></a>			       soft busy_trans_cycles[i] <q-w>inside</q-w> {[0:16]};
<a name="115"><q-n>     115  </q-n></a>			   }
<a name="116"><q-n>     116  </q-n></a>			 }
<a name="117"><q-n>     117  </q-n></a>			       
<a name="118"><q-n>     118  </q-n></a>  <q-m>/** data_count_for_hburst - data is generated based on the transfers */</q-m>
<a name="119"><q-n>     119  </q-n></a>  <q-w>constraint</q-w> data_count_for_hburst{ HWDATA.size()==beat_cnt; }
<a name="120"><q-n>     120  </q-n></a>  
<a name="121"><q-n>     121  </q-n></a>  <q-m>/** err_hsize_greater_than_data_width - enables the hsize greater than data width is enabled  */</q-m>
<a name="122"><q-n>     122  </q-n></a>  <q-w>constraint</q-w> err_hsize_greater_than_data_width {enb_hsize_greater_than_width_cb==0;}
<a name="123"><q-n>     123  </q-n></a>
<a name="124"><q-n>     124  </q-n></a>  <q-m>/** err_unalign_addr - unalign address callback is enabled */</q-m>
<a name="125"><q-n>     125  </q-n></a>  <q-w>constraint</q-w> err_unalign_addr {enb_haddr_cross_boundary_cb==0;}
<a name="126"><q-n>     126  </q-n></a>
<a name="127"><q-n>     127  </q-n></a>  <q-m>/** err_hsize_change_btn_burst */</q-m>
<a name="128"><q-n>     128  </q-n></a>  <q-w>constraint</q-w> err_hsize_change_btn_burst {enb_hsize_change_in_between_burst_cb==0;}
<a name="129"><q-n>     129  </q-n></a>
<a name="130"><q-n>     130  </q-n></a>  <q-m>/** err_hburst_change_btn_burst */</q-m>
<a name="131"><q-n>     131  </q-n></a>  <q-w>constraint</q-w> err_hburst_change_btn_busrt {enb_hburst_change_in_between_burst_cb==0;}
<a name="132"><q-n>     132  </q-n></a>  
<a name="133"><q-n>     133  </q-n></a>  <q-m>/** err_x_drive */</q-m>
<a name="134"><q-n>     134  </q-n></a>  <q-w>constraint</q-w> err_x_drive {enb_x_value_cb==0;}
<a name="135"><q-n>     135  </q-n></a>  
<a name="136"><q-n>     136  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_mas_trans"</q-l>);
<a name="137"><q-n>     137  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> calc();
<a name="138"><q-n>     138  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> print();
<a name="139"><q-n>     139  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> post_randomize();
<a name="140"><q-n>     140  </q-n></a>
<a name="141"><q-n>     141  </q-n></a><q-w>endclass</q-w> : ahb_mas_trans
<a name="142"><q-n>     142  </q-n></a> 
<a name="143"><q-n>     143  </q-n></a><q-m>//new method</q-m>
<a name="144"><q-n>     144  </q-n></a><q-w>function</q-w> ahb_mas_trans::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_mas_trans"</q-l>);
<a name="145"><q-n>     145  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="146"><q-n>     146  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="147"><q-n>     147  </q-n></a>  
<a name="148"><q-n>     148  </q-n></a><q-m>//calc method  </q-m>
<a name="149"><q-n>     149  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_trans::calc();
<a name="150"><q-n>     150  </q-n></a>
<a name="151"><q-n>     151  </q-n></a>  no_of_beats     = HWDATA.size();
<a name="152"><q-n>     152  </q-n></a>  no_of_bytes     = no_of_beats*(2**hsize_type);
<a name="153"><q-n>     153  </q-n></a>  lower_boundary  = (<q-w>int</q-w>'(HADDR/no_of_bytes))*no_of_bytes;
<a name="154"><q-n>     154  </q-n></a>  addr_boundary   = no_of_bytes;
<a name="155"><q-n>     155  </q-n></a>  addr_incr       = 2**hsize_type;
<a name="156"><q-n>     156  </q-n></a>  higher_boundary = lower_boundary + addr_boundary;
<a name="157"><q-n>     157  </q-n></a>  
<a name="158"><q-n>     158  </q-n></a><q-w>endfunction</q-w> : calc
<a name="159"><q-n>     159  </q-n></a>
<a name="160"><q-n>     160  </q-n></a><q-m>//print meythod</q-m>
<a name="161"><q-n>     161  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_trans::print();
<a name="162"><q-n>     162  </q-n></a>
<a name="163"><q-n>     163  </q-n></a>  $display(<q-l>"------------------------------------------------------------------"</q-l>);
<a name="164"><q-n>     164  </q-n></a>  $display(<q-l>"NAME           TYPE        SUB-TYPE     SIZE          VALUE"</q-l>);
<a name="165"><q-n>     165  </q-n></a>  $display(<q-l>"------------------------------------------------------------------"</q-l>);
<a name="166"><q-n>     166  </q-n></a>  $display(<q-l>"HWRITE        integral      binary        1          %b"</q-l>,HWRITE );
<a name="167"><q-n>     167  </q-n></a>  $display(<q-l>"HADDR         integral      hex          %0d         %h"</q-l>,`ADDR_WIDTH , HADDR );
<a name="168"><q-n>     168  </q-n></a>  $display(<q-l>"HWDATA        integral      hex          %0d         %p"</q-l>,`DATA_WIDTH,HWDATA );
<a name="169"><q-n>     169  </q-n></a>  $display(<q-l>"hburst_type   hburst_enum   enum          3          %p"</q-l>,hburst_type);
<a name="170"><q-n>     170  </q-n></a>  $display(<q-l>"hsize_type    hsize_enum    enum          3          %p"</q-l>,hsize_type);
<a name="171"><q-n>     171  </q-n></a>  $display(<q-l>"htrans_type   htrans_enum   enum          3          %p"</q-l>,htrans_type);
<a name="172"><q-n>     172  </q-n></a>  $display(<q-l>"HRDATA        integral      hex          %0d         %0h"</q-l>,`DATA_WIDTH,HRDATA );
<a name="173"><q-n>     173  </q-n></a>  $display(<q-l>"hresp_type    htrans_enum   enum          2          %p"</q-l>,hresp_type);
<a name="174"><q-n>     174  </q-n></a>  $display(<q-l>"hready        hready        bit           1          %p"</q-l>,HREADY);
<a name="175"><q-n>     175  </q-n></a>  $display(<q-l>"-------------------------------------------------------------------"</q-l>);
<a name="176"><q-n>     176  </q-n></a>
<a name="177"><q-n>     177  </q-n></a><q-w>endfunction</q-w> : print
<a name="178"><q-n>     178  </q-n></a>
<a name="179"><q-n>     179  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_mas_trans::post_randomize();
<a name="180"><q-n>     180  </q-n></a>
<a name="181"><q-n>     181  </q-n></a>  htrans_enum trans_q[$];
<a name="182"><q-n>     182  </q-n></a>
<a name="183"><q-n>     183  </q-n></a>  <q-m>//trans_q = htrans_type;</q-m>
<a name="184"><q-n>     184  </q-n></a>
<a name="185"><q-n>     185  </q-n></a>  <q-w>for</q-w>(<q-w>int</q-w> i=0; i&lt;htrans_type.size(); i++) <q-w>begin</q-w>
<a name="186"><q-n>     186  </q-n></a>    trans_q.push_back(htrans_type[i]);
<a name="187"><q-n>     187  </q-n></a>    <q-w>if</q-w>(i&lt;htrans_type.size()-1) <q-w>begin</q-w>
<a name="188"><q-n>     188  </q-n></a>      <q-w>repeat</q-w>(busy_trans_cycles[i])     
<a name="189"><q-n>     189  </q-n></a>        trans_q.push_back(BUSY);	    
<a name="190"><q-n>     190  </q-n></a>    <q-w>end</q-w>
<a name="191"><q-n>     191  </q-n></a>  <q-w>end</q-w>
<a name="192"><q-n>     192  </q-n></a>  
<a name="193"><q-n>     193  </q-n></a>  <q-m>/*foreach(busy_trans_cycles[i]) begin</q-m>
<a name="194"><q-n>     194  </q-n></a><q-m>    repeat(busy_trans_cycles[i]) begin</q-m>
<a name="195"><q-n>     195  </q-n></a><q-m>      trans_q.insert(i+1,BUSY); </q-m>
<a name="196"><q-n>     196  </q-n></a><q-m>    end</q-m>
<a name="197"><q-n>     197  </q-n></a><q-m>  end</q-m>
<a name="198"><q-n>     198  </q-n></a><q-m>*/</q-m>
<a name="199"><q-n>     199  </q-n></a>  htrans_type = trans_q;
<a name="200"><q-n>     200  </q-n></a>
<a name="201"><q-n>     201  </q-n></a><q-w>endfunction</q-w> : post_randomize
</pre>
</tt>

  
</body>
</html>
