
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>// Copyright 2017 ETH Zurich and University of Bologna.</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>// Copyright and related rights are licensed under the Solderpad Hardware</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>// License, Version 0.51 (the License); you may not use this file except in</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>// compliance with the License.  You may obtain a copy of the License at</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>// or agreed to in writing, software, hardware and materials distributed under</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>// this License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>// CONDITIONS OF ANY KIND, either express or implied. See the License for the</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>// specific language governing permissions and limitations under the License.</q-m>
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a><q-w>module</q-w> uart_interrupt
<a name="12"><q-n>     12  </q-n></a>#(
<a name="13"><q-n>     13  </q-n></a>    <q-w>parameter</q-w> TX_FIFO_DEPTH = 32,
<a name="14"><q-n>     14  </q-n></a>    <q-w>parameter</q-w> RX_FIFO_DEPTH = 32
<a name="15"><q-n>     15  </q-n></a>)
<a name="16"><q-n>     16  </q-n></a>(
<a name="17"><q-n>     17  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      clk_i,
<a name="18"><q-n>     18  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      rstn_i,
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>    <q-m>// registers</q-m>
<a name="21"><q-n>     21  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [2:0]                IER_i, <q-m>// interrupt enable register</q-m>
<a name="22"><q-n>     22  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      RDA_i, <q-m>// receiver data available</q-m>
<a name="23"><q-n>     23  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      CTI_i, <q-m>// character timeout indication</q-m>
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>    <q-m>// control logic</q-m>
<a name="26"><q-n>     26  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w>                      error_i,
<a name="27"><q-n>     27  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [$clog2(RX_FIFO_DEPTH):0]    rx_elements_i,
<a name="28"><q-n>     28  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [$clog2(TX_FIFO_DEPTH):0]    tx_elements_i,
<a name="29"><q-n>     29  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [1:0]                trigger_level_i,
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>    <q-w>input</q-w>  <q-w>logic</q-w> [3:0]                clr_int_i, <q-m>// one hot</q-m>
<a name="32"><q-n>     32  </q-n></a>
<a name="33"><q-n>     33  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w>                      interrupt_o,
<a name="34"><q-n>     34  </q-n></a>    <q-w>output</q-w> <q-w>logic</q-w> [3:0]                IIR_o
<a name="35"><q-n>     35  </q-n></a>);
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>    <q-w>logic</q-w> [3:0] iir_n, iir_q;
<a name="38"><q-n>     38  </q-n></a>    <q-w>logic</q-w> trigger_level_reached;
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>    <q-w>always_comb</q-w>
<a name="41"><q-n>     41  </q-n></a>    <q-w>begin</q-w>
<a name="42"><q-n>     42  </q-n></a>        trigger_level_reached = 1'b0;
<a name="43"><q-n>     43  </q-n></a>        <q-w>case</q-w> (trigger_level_i)
<a name="44"><q-n>     44  </q-n></a>            2'b00:
<a name="45"><q-n>     45  </q-n></a>                <q-w>if</q-w> ($<q-w>unsigned</q-w>(rx_elements_i) == 1)
<a name="46"><q-n>     46  </q-n></a>                    trigger_level_reached = 1'b1;
<a name="47"><q-n>     47  </q-n></a>            2'b01:
<a name="48"><q-n>     48  </q-n></a>                <q-w>if</q-w> ($<q-w>unsigned</q-w>(rx_elements_i) == 4)
<a name="49"><q-n>     49  </q-n></a>                    trigger_level_reached = 1'b1;
<a name="50"><q-n>     50  </q-n></a>            2'b10:
<a name="51"><q-n>     51  </q-n></a>                <q-w>if</q-w> ($<q-w>unsigned</q-w>(rx_elements_i) == 8)
<a name="52"><q-n>     52  </q-n></a>                    trigger_level_reached = 1'b1;
<a name="53"><q-n>     53  </q-n></a>            2'b11:
<a name="54"><q-n>     54  </q-n></a>                <q-w>if</q-w> ($<q-w>unsigned</q-w>(rx_elements_i) == 14)
<a name="55"><q-n>     55  </q-n></a>                    trigger_level_reached = 1'b1;
<a name="56"><q-n>     56  </q-n></a>            <q-w>default</q-w> : <q-m>/* default */</q-m>;
<a name="57"><q-n>     57  </q-n></a>        <q-w>endcase</q-w>
<a name="58"><q-n>     58  </q-n></a>    <q-w>end</q-w>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>    <q-w>always_comb</q-w>
<a name="61"><q-n>     61  </q-n></a>    <q-w>begin</q-w>
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>        <q-w>if</q-w> (clr_int_i == 4'b0)
<a name="64"><q-n>     64  </q-n></a>            iir_n = iir_q;
<a name="65"><q-n>     65  </q-n></a>        <q-w>else</q-w> <q-w>begin</q-w>
<a name="66"><q-n>     66  </q-n></a>            iir_n = iir_q &amp; ~(clr_int_i);
<a name="67"><q-n>     67  </q-n></a>	    iir_n = 4'b0001;
<a name="68"><q-n>     68  </q-n></a>	<q-w>end</q-w>
<a name="69"><q-n>     69  </q-n></a>        <q-m>// Receiver line status interrupt on: Overrun error, parity error, framing error or break interrupt</q-m>
<a name="70"><q-n>     70  </q-n></a>        <q-w>if</q-w> (IER_i[2] &amp; error_i)
<a name="71"><q-n>     71  </q-n></a>            iir_n = 4'b1100;
<a name="72"><q-n>     72  </q-n></a>        <q-m>//Received data available or trigger level reached in FIFO mode</q-m>
<a name="73"><q-n>     73  </q-n></a>        <q-w>else</q-w> <q-w>if</q-w> (IER_i[0] &amp; (trigger_level_reached | RDA_i))
<a name="74"><q-n>     74  </q-n></a>        <q-m>//else if (IER_i[0] &amp; (trigger_level_reached &amp; RDA_i))</q-m>
<a name="75"><q-n>     75  </q-n></a>            iir_n = 4'b1000;
<a name="76"><q-n>     76  </q-n></a>        <q-m>//Character timeout indication</q-m>
<a name="77"><q-n>     77  </q-n></a>        <q-w>else</q-w> <q-w>if</q-w> (IER_i[0] &amp; CTI_i)
<a name="78"><q-n>     78  </q-n></a>            iir_n = 4'b1000;
<a name="79"><q-n>     79  </q-n></a>        <q-m>//Transmitter holding register empty</q-m>
<a name="80"><q-n>     80  </q-n></a>        <q-w>else</q-w> <q-w>if</q-w> (IER_i[1] &amp; tx_elements_i == 0)
<a name="81"><q-n>     81  </q-n></a>            iir_n = 4'b0100;
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>    <q-w>end</q-w>
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>    <q-w>always_ff</q-w> @(<q-a>posedge</q-w> clk_i, <q-a>negedge</q-w> rstn_i)
<a name="87"><q-n>     87  </q-n></a>    <q-w>begin</q-w>
<a name="88"><q-n>     88  </q-n></a>        <q-w>if</q-w> (~rstn_i)
<a name="89"><q-n>     89  </q-n></a>        <q-w>begin</q-w>
<a name="90"><q-n>     90  </q-n></a>            iir_q &lt;= 4'b0001;
<a name="91"><q-n>     91  </q-n></a>        <q-w>end</q-w>
<a name="92"><q-n>     92  </q-n></a>        <q-w>else</q-w>
<a name="93"><q-n>     93  </q-n></a>        <q-w>begin</q-w>
<a name="94"><q-n>     94  </q-n></a>            iir_q &lt;= iir_n;
<a name="95"><q-n>     95  </q-n></a>        <q-w>end</q-w>
<a name="96"><q-n>     96  </q-n></a>    <q-w>end</q-w>
<a name="97"><q-n>     97  </q-n></a>
<a name="98"><q-n>     98  </q-n></a>    <q-w>assign</q-w> IIR_o = iir_q;
<a name="99"><q-n>     99  </q-n></a>    <q-w>assign</q-w> interrupt_o = ~iir_q[0];
<a name="100"><q-n>     100  </q-n></a>
<a name="101"><q-n>     101  </q-n></a><q-w>endmodule</q-w>
<a name="102"><q-n>     102  </q-n></a>
</pre>
</tt>

  
</body>
</html>
