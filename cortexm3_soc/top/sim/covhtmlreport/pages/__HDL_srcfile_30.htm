
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_slave_sequencer.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * Abstract:</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * ahb_slv_seqr provides communication between sequences and slave driver.</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> *</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> */</q-m>
<a name="13"><q-n>     13  </q-n></a>
<a name="14"><q-n>     14  </q-n></a>`ifndef AHB_SLAVE_SEQUENCER
<a name="15"><q-n>     15  </q-n></a>`<q-a>define</q-w> AHB_SLAVE_SEQUENCER
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a><q-w>class</q-w> ahb_slv_seqr <q-w>extends</q-w> uvm_sequencer #(ahb_slv_trans);
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>  <q-m>/** memory for reactive slave mode */</q-m>  
<a name="20"><q-n>     20  </q-n></a>  <q-w>bit</q-w> [7:0] mem [`MEM_DEAPTH];
<a name="21"><q-n>     21  </q-n></a>
<a name="22"><q-n>     22  </q-n></a>  <q-m>/** wr_trans_q - transaction queue for storing transactions in sequence */</q-m>
<a name="23"><q-n>     23  </q-n></a>  ahb_slv_trans wr_trans_q[$];
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>  <q-m>/** interface handle */</q-m>
<a name="26"><q-n>     26  </q-n></a>  <q-w>virtual</q-w> ahb_inf vif;
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a>  <q-m>/** factroy registration */</q-m>
<a name="29"><q-n>     29  </q-n></a>  `uvm_component_param_utils(ahb_slv_seqr)
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>  <q-m>/** item_export - analysis export for receiveing transactions from monitor */</q-m>
<a name="32"><q-n>     32  </q-n></a>  uvm_analysis_export #(ahb_slv_trans) item_export;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>  <q-m>/** item_collected_fifo for storing the received transactions */</q-m>
<a name="35"><q-n>     35  </q-n></a>  uvm_tlm_analysis_fifo #(ahb_slv_trans) item_collected_fifo;
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="38"><q-n>     38  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_slv_seqr"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>  <q-m>/** build phase */</q-m>
<a name="41"><q-n>     41  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>  <q-m>/** connect phase */</q-m>
<a name="44"><q-n>     44  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> connect_phase(uvm_phase phase);
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>  <q-m>/** run phase */</q-m>
<a name="47"><q-n>     47  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a><q-w>endclass</q-w> : ahb_slv_seqr
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="52"><q-n>     52  </q-n></a><q-m>//methods</q-m>
<a name="53"><q-n>     53  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a><q-m>/** class constructor */</q-m>
<a name="56"><q-n>     56  </q-n></a><q-w>function</q-w> ahb_slv_seqr::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_slv_seqr"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="57"><q-n>     57  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="58"><q-n>     58  </q-n></a>  <q-m>/** create item_export and item_collected_fifo */</q-m>
<a name="59"><q-n>     59  </q-n></a>  item_export = <q-w>new</q-w>(<q-l>"item_export"</q-l>,<q-w>this</q-w>);
<a name="60"><q-n>     60  </q-n></a>  item_collected_fifo = <q-w>new</q-w>(<q-l>"item_collected_fifo"</q-l>,<q-w>this</q-w>);
<a name="61"><q-n>     61  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a><q-m>/** build phase */</q-m>
<a name="64"><q-n>     64  </q-n></a><q-w>function</q-w> <q-w>void</q-w>  ahb_slv_seqr::build_phase(uvm_phase phase);
<a name="65"><q-n>     65  </q-n></a>  <q-w>if</q-w>(!(uvm_config_db#(<q-w>virtual</q-w> ahb_inf)::get(<q-w>null</q-w>,<q-l>""</q-l>,<q-l>"inf"</q-l>,vif))) <q-w>begin</q-w>
<a name="66"><q-n>     66  </q-n></a>    `uvm_fatal(get_type_name(),<q-l>"Failed To Get Interface!!!"</q-l>)
<a name="67"><q-n>     67  </q-n></a>  <q-w>end</q-w>
<a name="68"><q-n>     68  </q-n></a><q-w>endfunction</q-w> : build_phase
<a name="69"><q-n>     69  </q-n></a>
<a name="70"><q-n>     70  </q-n></a><q-m>/** connect phase */</q-m>
<a name="71"><q-n>     71  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_slv_seqr::connect_phase(uvm_phase phase);
<a name="72"><q-n>     72  </q-n></a>  <q-w>super</q-w>.connect_phase(phase);
<a name="73"><q-n>     73  </q-n></a>  item_export.connect(item_collected_fifo.analysis_export);
<a name="74"><q-n>     74  </q-n></a><q-w>endfunction</q-w> : connect_phase
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a><q-m>/** run phase */</q-m>
<a name="77"><q-n>     77  </q-n></a><q-w>task</q-w> ahb_slv_seqr::run_phase(uvm_phase phase);
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a> ahb_slv_trans req;	
<a name="80"><q-n>     80  </q-n></a>
<a name="81"><q-n>     81  </q-n></a> <q-w>forever</q-w> <q-w>begin</q-w>
<a name="82"><q-n>     82  </q-n></a>   @(<q-a>negedge</q-w> vif.hresetn);
<a name="83"><q-n>     83  </q-n></a>   wr_trans_q.delete(); 
<a name="84"><q-n>     84  </q-n></a>   <q-w>foreach</q-w>(mem[i])
<a name="85"><q-n>     85  </q-n></a>     mem[i]='b0;
<a name="86"><q-n>     86  </q-n></a> <q-w>end</q-w>
<a name="87"><q-n>     87  </q-n></a><q-w>endtask</q-w> : run_phase
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>`<q-a>endif</q-w> <q-m>//AHB_SLAVE_SEQUENCER</q-m>
</pre>
</tt>

  
</body>
</html>
