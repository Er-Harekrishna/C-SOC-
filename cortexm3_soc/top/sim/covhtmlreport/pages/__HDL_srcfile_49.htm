
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_master_error_sequence.sv</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>/**</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m> * Abstract:</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m> * This class defines a sequence in which a all error scenarios is generated </q-m>
<a name="11"><q-n>     11  </q-n></a><q-m> * using `uvm_do_with macros.</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m> *</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m> * Execution phase: main_phase</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m> * Sequencer: ahb_mas_seqr</q-m>
<a name="15"><q-n>     15  </q-n></a><q-m> *</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m> */</q-m>
<a name="17"><q-n>     17  </q-n></a>	 
<a name="18"><q-n>     18  </q-n></a>`ifndef AHB_MASTER_ERROR_SEQUENCE
<a name="19"><q-n>     19  </q-n></a>`<q-a>define</q-w> AHB_MASTER_ERROR_SEQUENCE
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a><q-w>class</q-w> ahb_master_error_sequence <q-w>extends</q-w> ahb_base_master_sequence;
<a name="22"><q-n>     22  </q-n></a>
<a name="23"><q-n>     23  </q-n></a>  <q-m>/** factroy registration */</q-m>
<a name="24"><q-n>     24  </q-n></a>  `uvm_object_utils(ahb_master_error_sequence)
<a name="25"><q-n>     25  </q-n></a>
<a name="26"><q-n>     26  </q-n></a>  <q-m>/** class constructor */</q-m>
<a name="27"><q-n>     27  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_master_error_sequence"</q-l>);
<a name="28"><q-n>     28  </q-n></a>  
<a name="29"><q-n>     29  </q-n></a>  <q-m>/** body method for generating stimulus */</q-m>
<a name="30"><q-n>     30  </q-n></a>  <q-w>extern</q-w> <q-w>task</q-w> body();
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a><q-w>endclass</q-w> : ahb_master_error_sequence
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="35"><q-n>     35  </q-n></a><q-m>//methods</q-m>
<a name="36"><q-n>     36  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a><q-m>/** class constructor */</q-m>
<a name="39"><q-n>     39  </q-n></a><q-w>function</q-w> ahb_master_error_sequence::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_master_error_sequence"</q-l>);
<a name="40"><q-n>     40  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="41"><q-n>     41  </q-n></a><q-w>endfunction</q-w> 
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a><q-m>/** body method for generating stimulus */</q-m>
<a name="44"><q-n>     44  </q-n></a><q-w>task</q-w> ahb_master_error_sequence::body();
<a name="45"><q-n>     45  </q-n></a>  
<a name="46"><q-n>     46  </q-n></a>  `uvm_info(<q-l>"body"</q-l>, <q-l>"Entered ..."</q-l>, UVM_MEDIUM)
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>  <q-w>if</q-w>(!(uvm_config_db #(<q-w>int</q-w> <q-w>unsigned</q-w>)::get(<q-w>null</q-w>, get_full_name(), <q-l>"sequence_length"</q-l>, sequence_length)))
<a name="49"><q-n>     49  </q-n></a>    `uvm_info(<q-l>"BODY"</q-l>,<q-l>"GET FAILED"</q-l>,UVM_MEDIUM)
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>  `uvm_info(<q-l>"body"</q-l>, $sformatf(<q-l>"sequence_length is %0d"</q-l>, sequence_length), UVM_MEDIUM);
<a name="52"><q-n>     52  </q-n></a>  
<a name="53"><q-n>     53  </q-n></a><q-m>// for(int k=2;k&lt;8;k++) begin</q-m>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a>  <q-m>/* for(int i=0;i&lt;=$clog2(`DATA_WIDTH/8);i++) begin</q-m>
<a name="56"><q-n>     56  </q-n></a><q-m></q-m>
<a name="57"><q-n>     57  </q-n></a><q-m>//---first not noseq seq.</q-m>
<a name="58"><q-n>     58  </q-n></a><q-m>     repeat (sequence_length) begin</q-m>
<a name="59"><q-n>     59  </q-n></a><q-m>      //if(k==2 || k==3) begin</q-m>
<a name="60"><q-n>     60  </q-n></a><q-m>        write(INCR4,hsize_enum'(i),{NONSEQ,SEQ,SEQ,SEQ});</q-m>
<a name="61"><q-n>     61  </q-n></a><q-m>        read(INCR4,{NONSEQ,SEQ,SEQ,SEQ}); </q-m>
<a name="62"><q-n>     62  </q-n></a><q-m>      //end</q-m>
<a name="63"><q-n>     63  </q-n></a><q-m>      //if(k==4 || k==5) begin</q-m>
<a name="64"><q-n>     64  </q-n></a><q-m>        write(INCR8,hsize_enum'(i),{SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ});</q-m>
<a name="65"><q-n>     65  </q-n></a><q-m>        read(INCR8,{SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ}); </q-m>
<a name="66"><q-n>     66  </q-n></a><q-m>      //end</q-m>
<a name="67"><q-n>     67  </q-n></a><q-m>      //if(k==6 || k==7) begin</q-m>
<a name="68"><q-n>     68  </q-n></a><q-m>        write(INCR16,hsize_enum'(i),{SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ});</q-m>
<a name="69"><q-n>     69  </q-n></a><q-m>        read(INCR16,{SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ}); </q-m>
<a name="70"><q-n>     70  </q-n></a><q-m>     // end</q-m>
<a name="71"><q-n>     71  </q-n></a><q-m> </q-m>
<a name="72"><q-n>     72  </q-n></a><q-m>     end</q-m>
<a name="73"><q-n>     73  </q-n></a><q-m>    </q-m>
<a name="74"><q-n>     74  </q-n></a><q-m>     p_sequencer.vif.reset(1,2);</q-m>
<a name="75"><q-n>     75  </q-n></a><q-m></q-m>
<a name="76"><q-n>     76  </q-n></a><q-m>//---sanity seq. </q-m>
<a name="77"><q-n>     77  </q-n></a><q-m>     repeat(3) begin</q-m>
<a name="78"><q-n>     78  </q-n></a><q-m>       write(SINGLE,hsize_enum'(i),{});</q-m>
<a name="79"><q-n>     79  </q-n></a><q-m>       read(SINGLE,{});</q-m>
<a name="80"><q-n>     80  </q-n></a><q-m>     end</q-m>
<a name="81"><q-n>     81  </q-n></a><q-m></q-m>
<a name="82"><q-n>     82  </q-n></a><q-m></q-m>
<a name="83"><q-n>     83  </q-n></a><q-m>//---idle to busy seq</q-m>
<a name="84"><q-n>     84  </q-n></a><q-m>        </q-m>
<a name="85"><q-n>     85  </q-n></a><q-m>     repeat (sequence_length) begin</q-m>
<a name="86"><q-n>     86  </q-n></a><q-m>     // if(k==2 || k==3) begin</q-m>
<a name="87"><q-n>     87  </q-n></a><q-m>        write(INCR4,hsize_enum'(i),{NONSEQ,SEQ,BUSY,IDLE,BUSY,SEQ,SEQ});</q-m>
<a name="88"><q-n>     88  </q-n></a><q-m>        read(INCR4,{NONSEQ,SEQ,BUSY,IDLE,BUSY,SEQ,SEQ});</q-m>
<a name="89"><q-n>     89  </q-n></a><q-m>     // end</q-m>
<a name="90"><q-n>     90  </q-n></a><q-m>     // if(k==4 || k==5) begin</q-m>
<a name="91"><q-n>     91  </q-n></a><q-m>        write(INCR8,hsize_enum'(i),{NONSEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,IDLE,BUSY,SEQ,SEQ});</q-m>
<a name="92"><q-n>     92  </q-n></a><q-m>        read(INCR8,{NONSEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,IDLE,BUSY,SEQ,SEQ});</q-m>
<a name="93"><q-n>     93  </q-n></a><q-m>     // end</q-m>
<a name="94"><q-n>     94  </q-n></a><q-m>     // if(k==6 || k==7) begin</q-m>
<a name="95"><q-n>     95  </q-n></a><q-m>        write(INCR16,hsize_enum'(i),{NONSEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,SEQ,SEQ,IDLE,BUSY,SEQ,BUSY,SEQ,BUSY,SEQ});</q-m>
<a name="96"><q-n>     96  </q-n></a><q-m>        read(INCR16,{NONSEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,SEQ,SEQ,IDLE,BUSY,SEQ,BUSY,SEQ,BUSY,SEQ});</q-m>
<a name="97"><q-n>     97  </q-n></a><q-m>       //end</q-m>
<a name="98"><q-n>     98  </q-n></a><q-m>      end</q-m>
<a name="99"><q-n>     99  </q-n></a><q-m></q-m>
<a name="100"><q-n>     100  </q-n></a><q-m>      p_sequencer.vif.reset(1,2);</q-m>
<a name="101"><q-n>     101  </q-n></a><q-m></q-m>
<a name="102"><q-n>     102  </q-n></a><q-m>//---sanity seq. </q-m>
<a name="103"><q-n>     103  </q-n></a><q-m>     repeat(3) begin</q-m>
<a name="104"><q-n>     104  </q-n></a><q-m>       write(SINGLE,hsize_enum'(i),{});</q-m>
<a name="105"><q-n>     105  </q-n></a><q-m>       read(SINGLE,{});</q-m>
<a name="106"><q-n>     106  </q-n></a><q-m>     end</q-m>
<a name="107"><q-n>     107  </q-n></a><q-m></q-m>
<a name="108"><q-n>     108  </q-n></a><q-m>//--idle to seq seq</q-m>
<a name="109"><q-n>     109  </q-n></a><q-m></q-m>
<a name="110"><q-n>     110  </q-n></a><q-m>     repeat (sequence_length) begin</q-m>
<a name="111"><q-n>     111  </q-n></a><q-m>      //if(k==2 || k==3) begin</q-m>
<a name="112"><q-n>     112  </q-n></a><q-m>        write(INCR4,hsize_enum'(i),{NONSEQ,SEQ,IDLE,SEQ,SEQ});</q-m>
<a name="113"><q-n>     113  </q-n></a><q-m>        read(INCR4,{NONSEQ,SEQ,IDLE,SEQ,SEQ});</q-m>
<a name="114"><q-n>     114  </q-n></a><q-m>      //end</q-m>
<a name="115"><q-n>     115  </q-n></a><q-m>      //if(k==4 || k==5) begin</q-m>
<a name="116"><q-n>     116  </q-n></a><q-m>        write(INCR8,hsize_enum'(i),{NONSEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,IDLE,SEQ,SEQ});</q-m>
<a name="117"><q-n>     117  </q-n></a><q-m>        read(INCR8,{NONSEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,IDLE,SEQ,SEQ});</q-m>
<a name="118"><q-n>     118  </q-n></a><q-m>      //end</q-m>
<a name="119"><q-n>     119  </q-n></a><q-m>      //if(k==6 || k==7) begin</q-m>
<a name="120"><q-n>     120  </q-n></a><q-m>        write(INCR16,hsize_enum'(i),{NONSEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,SEQ,SEQ,IDLE,SEQ,BUSY,SEQ,BUSY,SEQ});</q-m>
<a name="121"><q-n>     121  </q-n></a><q-m>        read(INCR16,{NONSEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,SEQ,BUSY,SEQ,SEQ,BUSY,SEQ,SEQ,SEQ,IDLE,SEQ,BUSY,SEQ,BUSY,SEQ});</q-m>
<a name="122"><q-n>     122  </q-n></a><q-m>      //end</q-m>
<a name="123"><q-n>     123  </q-n></a><q-m>     end</q-m>
<a name="124"><q-n>     124  </q-n></a><q-m>   </q-m>
<a name="125"><q-n>     125  </q-n></a><q-m>      p_sequencer.vif.reset(1,2);</q-m>
<a name="126"><q-n>     126  </q-n></a><q-m></q-m>
<a name="127"><q-n>     127  </q-n></a><q-m>//---sanity seq. </q-m>
<a name="128"><q-n>     128  </q-n></a><q-m>     repeat(3) begin</q-m>
<a name="129"><q-n>     129  </q-n></a><q-m>       write(SINGLE,hsize_enum'(i),{});</q-m>
<a name="130"><q-n>     130  </q-n></a><q-m>       read(SINGLE,{});</q-m>
<a name="131"><q-n>     131  </q-n></a><q-m>     end</q-m>
<a name="132"><q-n>     132  </q-n></a><q-m>   end*/</q-m>
<a name="133"><q-n>     133  </q-n></a><q-m>// end</q-m>
<a name="134"><q-n>     134  </q-n></a>   <q-w>repeat</q-w>(5) <q-w>begin</q-w>
<a name="135"><q-n>     135  </q-n></a>
<a name="136"><q-n>     136  </q-n></a>     `uvm_do_with(req,
<a name="137"><q-n>     137  </q-n></a>      { HADDR       == 0;
<a name="138"><q-n>     138  </q-n></a>        HWRITE      == 1;
<a name="139"><q-n>     139  </q-n></a>	hburst_type == hburst_enum'(SINGLE);
<a name="140"><q-n>     140  </q-n></a>	hsize_type  == hsize_enum'(BYTE);
<a name="141"><q-n>     141  </q-n></a>	incr_size   == 3;
<a name="142"><q-n>     142  </q-n></a>	<q-w>foreach</q-w>(busy_trans_cycles[i])
<a name="143"><q-n>     143  </q-n></a>	  busy_trans_cycles[i]==0;
<a name="144"><q-n>     144  </q-n></a>      })
<a name="145"><q-n>     145  </q-n></a>     
<a name="146"><q-n>     146  </q-n></a>     `uvm_do_with(req,
<a name="147"><q-n>     147  </q-n></a>      { HADDR       == 0;
<a name="148"><q-n>     148  </q-n></a>        HWRITE      == 0;
<a name="149"><q-n>     149  </q-n></a>	hburst_type == hburst_enum'(SINGLE);
<a name="150"><q-n>     150  </q-n></a>	hsize_type  == hsize_enum'(BYTE);
<a name="151"><q-n>     151  </q-n></a>	incr_size   == 3;
<a name="152"><q-n>     152  </q-n></a>	<q-w>foreach</q-w>(busy_trans_cycles[i])
<a name="153"><q-n>     153  </q-n></a>	  busy_trans_cycles[i]==0;
<a name="154"><q-n>     154  </q-n></a>      })
<a name="155"><q-n>     155  </q-n></a>      
<a name="156"><q-n>     156  </q-n></a>   <q-w>end</q-w>
<a name="157"><q-n>     157  </q-n></a>
<a name="158"><q-n>     158  </q-n></a>  `uvm_info(<q-l>"body"</q-l>, <q-l>"Exiting ..."</q-l>, UVM_MEDIUM)
<a name="159"><q-n>     159  </q-n></a>
<a name="160"><q-n>     160  </q-n></a><q-w>endtask</q-w> : body
<a name="161"><q-n>     161  </q-n></a>
<a name="162"><q-n>     162  </q-n></a>`<q-a>endif</q-w> <q-m>//AHB_MASTER_ERROR_SEQUENCE</q-m>
<a name="163"><q-n>     163  </q-n></a>
<a name="164"><q-n>     164  </q-n></a>
<a name="165"><q-n>     165  </q-n></a>
</pre>
</tt>

  
</body>
</html>
