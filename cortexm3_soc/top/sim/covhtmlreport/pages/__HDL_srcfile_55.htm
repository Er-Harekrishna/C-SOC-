
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//  NAME      :- Pradip Prajapati</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>//  FILE_NAME :- ahb_cc.svh</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//  EDITED_BY :- Karan Patadiya</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>/////////////////////////////////////////////////////////////////////////////////////////////////////////////</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>//`define ADDRR_WIDTH 32</q-m>
<a name="9"><q-n>     9  </q-n></a>
<a name="10"><q-n>     10  </q-n></a>                 <q-m>/** WILDCARD BINS FOR WORD , HALFWORD AND BYTE ALIGNED</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>                     * ADDRESS====&gt;new bins from vip */</q-m>
<a name="12"><q-n>     12  </q-n></a>  <q-w>covergroup</q-w> cvg_32_bit_aligned_addr <q-w>with</q-w> <q-w>function</q-w> sample(ahb_mas_trans mas_trans_h);
<a name="13"><q-n>     13  </q-n></a>
<a name="14"><q-n>     14  </q-n></a>    bit_32_aligned_addr     : <q-w>coverpoint</q-w> mas_trans_h.HADDR{
<a name="15"><q-n>     15  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_byte_aligned = {32'h????_????};
<a name="16"><q-n>     16  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_halfword_aligned = {{28'h????_???,4'b???0}};
<a name="17"><q-n>     17  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_word_aligned = {{28'h????_???,4'b??00}};
<a name="18"><q-n>     18  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_doubleword_aligned = {{28'h????_???,4'b?000}};
<a name="19"><q-n>     19  </q-n></a>                     }
<a name="20"><q-n>     20  </q-n></a>  <q-w>endgroup</q-w>
<a name="21"><q-n>     21  </q-n></a>  <q-w>covergroup</q-w> cvg_64_bit_aligned_addr <q-w>with</q-w> <q-w>function</q-w> sample(ahb_mas_trans mas_trans_h);
<a name="22"><q-n>     22  </q-n></a>    bit_64_aligned_addr : <q-w>coverpoint</q-w> mas_trans_h.HADDR{
<a name="23"><q-n>     23  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_byte_aligned = {64'h????_????_????_????};
<a name="24"><q-n>     24  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_halfword_aligned = {{60'h????_????_????_???,4'b???0}};
<a name="25"><q-n>     25  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_word_aligned = {{60'h????_????_????_???,4'b??00}};
<a name="26"><q-n>     26  </q-n></a>                       <q-w>wildcard</q-w> <q-w>bins</q-w> wildcard_bins_for_doubleword_aligned = {{60'h????_????_????_???,4'b?000}};
<a name="27"><q-n>     27  </q-n></a>                     }
<a name="28"><q-n>     28  </q-n></a>  <q-w>endgroup</q-w>
<a name="29"><q-n>     29  </q-n></a>  
<a name="30"><q-n>     30  </q-n></a>  <q-w>covergroup</q-w> cvg_mas_data <q-w>with</q-w> <q-w>function</q-w> sample(ahb_mas_trans mas_trans_h,<q-w>bit</q-w> b);
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a>    option.per_instance = 1;        <q-m>//we need multiple instance seperate coverage.</q-m>
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>    mas_wdata_in : <q-w>coverpoint</q-w> b{
<a name="35"><q-n>     35  </q-n></a>                      <q-w>bins</q-w> data_transition_0_to_1=(0=&gt;1);
<a name="36"><q-n>     36  </q-n></a>                      <q-w>bins</q-w> data_transition_1_to_0=(1=&gt;0);
<a name="37"><q-n>     37  </q-n></a>                   }
<a name="38"><q-n>     38  </q-n></a>  <q-w>endgroup</q-w>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>  <q-w>covergroup</q-w> cvg_mas_all_signals <q-w>with</q-w> <q-w>function</q-w> sample(ahb_mas_trans mas_trans_h);
<a name="41"><q-n>     41  </q-n></a>    mas_haddr_range  : <q-w>coverpoint</q-w> mas_trans_h.HADDR{
<a name="42"><q-n>     42  </q-n></a>                     <q-w>bins</q-w> addr_low_range={[0:500]};
<a name="43"><q-n>     43  </q-n></a>                     <q-w>bins</q-w> addr_mid_range={[501:1500]};
<a name="44"><q-n>     44  </q-n></a>                     <q-w>bins</q-w> addr_high_range ={[1501:2048]};
<a name="45"><q-n>     45  </q-n></a>                 }
<a name="46"><q-n>     46  </q-n></a>                 
<a name="47"><q-n>     47  </q-n></a>    
<a name="48"><q-n>     48  </q-n></a>    mas_hwrite_transition : <q-w>coverpoint</q-w> mas_trans_h.HWRITE{
<a name="49"><q-n>     49  </q-n></a>                      <q-w>bins</q-w> hwrite_0_to_1=(0=&gt;1);
<a name="50"><q-n>     50  </q-n></a>                      <q-w>bins</q-w> hwrite_1_to_0=(1=&gt;0);
<a name="51"><q-n>     51  </q-n></a>                 }
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>    hwrite_range : <q-w>coverpoint</q-w> mas_trans_h.HWRITE{
<a name="54"><q-n>     54  </q-n></a>                      <q-m>//bins hwrite[] = {0,1}; </q-m>
<a name="55"><q-n>     55  </q-n></a>                      <q-w>bins</q-w> hwrite_0 = {0};
<a name="56"><q-n>     56  </q-n></a>                      <q-w>bins</q-w> hwrite_1 = {1};
<a name="57"><q-n>     57  </q-n></a>                  }
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>    mas_hburst_state : <q-w>coverpoint</q-w> mas_trans_h.hburst_type{
<a name="60"><q-n>     60  </q-n></a>                         <q-w>bins</q-w> single_burst_operation = {SINGLE};
<a name="61"><q-n>     61  </q-n></a>                         <q-w>bins</q-w> incr_burst_operation = {INCR};
<a name="62"><q-n>     62  </q-n></a>                         <q-w>bins</q-w> incr4_burst_operation = {INCR4};
<a name="63"><q-n>     63  </q-n></a>                         <q-w>bins</q-w> incr8_burst_operation = {INCR8};
<a name="64"><q-n>     64  </q-n></a>                         <q-w>bins</q-w> incr16_burst_operation = {INCR16};
<a name="65"><q-n>     65  </q-n></a>                         <q-w>bins</q-w> wrap4_burst_operation = {WRAP4};
<a name="66"><q-n>     66  </q-n></a>                         <q-w>bins</q-w> wrap8_burst_operation = {WRAP8};
<a name="67"><q-n>     67  </q-n></a>                         <q-w>bins</q-w> wrap16_burst_operation = {WRAP16};
<a name="68"><q-n>     68  </q-n></a>                 }
<a name="69"><q-n>     69  </q-n></a>  
<a name="70"><q-n>     70  </q-n></a>    cross_hburst_wr_rd_operation : <q-w>coverpoint</q-w> {mas_trans_h.hburst_type,mas_trans_h.HWRITE} {
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> single_wr_rd_any_burst_rd_wr = (4'b000? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="73"><q-n>     73  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> incr_wr_rd_any_burst_rd_wr = (4'b001? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="74"><q-n>     74  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> wrap4_wr_rd_any_burst_rd_wr = (4'b010? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="75"><q-n>     75  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> incr4_wr_rd_any_burst_rd_wr = (4'b011? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="76"><q-n>     76  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> wrap8_wr_rd_any_burst_rd_wr = (4'b100? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="77"><q-n>     77  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> incr8_wr_rd_any_burst_rd_wr = (4'b101? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="78"><q-n>     78  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> wrap16_wr_rd_any_burst_rd_wr = (4'b110? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="79"><q-n>     79  </q-n></a>                  <q-w>wildcard</q-w> <q-w>bins</q-w> incr16_wr_rd_any_burst_rd_wr = (4'b111? =&gt; 4'b000?,4'b001?,4'b011?,4'b100?,4'b101?,4'b110?,4'b111?);
<a name="80"><q-n>     80  </q-n></a>
<a name="81"><q-n>     81  </q-n></a>                }
<a name="82"><q-n>     82  </q-n></a>    mas_hsize :  <q-w>coverpoint</q-w> mas_trans_h.hsize_type{
<a name="83"><q-n>     83  </q-n></a>                      <q-m>//bins hsize[] = {[0:$clog2(`DATA_WIDTH/8)]};</q-m>
<a name="84"><q-n>     84  </q-n></a>                      <q-w>bins</q-w> hsize[] = {[0:2]};
<a name="85"><q-n>     85  </q-n></a>                 }
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>    htrans_state : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="88"><q-n>     88  </q-n></a>                      <q-w>bins</q-w> idle_trans = {IDLE};
<a name="89"><q-n>     89  </q-n></a>                      <q-w>bins</q-w> nonseq_trans = {NONSEQ};
<a name="90"><q-n>     90  </q-n></a>                      <q-w>bins</q-w> busy_trans = {BUSY};
<a name="91"><q-n>     91  </q-n></a>                      <q-w>bins</q-w> seq_trans = {SEQ};
<a name="92"><q-n>     92  </q-n></a>                  }
<a name="93"><q-n>     93  </q-n></a>
<a name="94"><q-n>     94  </q-n></a>    htrans_nonseq_state : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="95"><q-n>     95  </q-n></a>                         <q-w>bins</q-w> nonseq_trans = {NONSEQ};
<a name="96"><q-n>     96  </q-n></a>                     }
<a name="97"><q-n>     97  </q-n></a>
<a name="98"><q-n>     98  </q-n></a><q-m>/** waited===&gt;all burst possible transition change*/</q-m>                  
<a name="99"><q-n>     99  </q-n></a>    waited_all_burst_trans_change  : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="100"><q-n>     100  </q-n></a>                      <q-w>bins</q-w> idle_nonseq = (IDLE=&gt;NONSEQ);
<a name="101"><q-n>     101  </q-n></a>                  }
<a name="102"><q-n>     102  </q-n></a>    
<a name="103"><q-n>     103  </q-n></a>    cross_cp_all_burst_htrans_waited_scenario : <q-w>cross</q-w> mas_hburst_state , waited_all_burst_trans_change <q-w>iff</q-w>(!mas_trans_h.HREADY){
<a name="104"><q-n>     104  </q-n></a>                                   <q-w>bins</q-w> cross_all_burst_idle_to_nonseq_operation = <q-w>binsof</q-w>(mas_hburst_state) &amp;&amp; <q-w>binsof</q-w>(waited_all_burst_trans_change);
<a name="105"><q-n>     105  </q-n></a>                               }
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a><q-m>/** waited===&gt;fixed burst possible transition change*/</q-m>                  
<a name="108"><q-n>     108  </q-n></a>    fixed_hburst_waited_scenario : <q-w>coverpoint</q-w> mas_trans_h.hburst_type{
<a name="109"><q-n>     109  </q-n></a>                                   <q-w>bins</q-w> waited_fixed_hburst[]={INCR4,WRAP4,INCR8,WRAP8,INCR16,WRAP16};
<a name="110"><q-n>     110  </q-n></a>                               }
<a name="111"><q-n>     111  </q-n></a>    waited_fixed_burst_trans_change  : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="112"><q-n>     112  </q-n></a>                      <q-w>bins</q-w> busy_seq = (BUSY=&gt;SEQ);
<a name="113"><q-n>     113  </q-n></a>                  }
<a name="114"><q-n>     114  </q-n></a>    cross_cp_fixed_burst_htrans_waited_scenario : <q-w>cross</q-w> fixed_hburst_waited_scenario , waited_fixed_burst_trans_change <q-w>iff</q-w>(!mas_trans_h.HREADY){
<a name="115"><q-n>     115  </q-n></a>                               }
<a name="116"><q-n>     116  </q-n></a>
<a name="117"><q-n>     117  </q-n></a><q-m>/** waited===&gt;undefined length burst possible transition change*/</q-m>                  
<a name="118"><q-n>     118  </q-n></a>    undefined_length_hburst_waited_scenario : <q-w>coverpoint</q-w> mas_trans_h.hburst_type{
<a name="119"><q-n>     119  </q-n></a>                                   <q-w>bins</q-w> waited_undefined_hburst={INCR};
<a name="120"><q-n>     120  </q-n></a>                               }
<a name="121"><q-n>     121  </q-n></a>
<a name="122"><q-n>     122  </q-n></a>    waited_undefined_trans_change_for_idle_burst  : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="123"><q-n>     123  </q-n></a>                      
<a name="124"><q-n>     124  </q-n></a>                      <q-m>//BUSY TO ALL TRANS TYPE TRANSITION.</q-m>
<a name="125"><q-n>     125  </q-n></a>                      <q-w>bins</q-w> busy_idle = (BUSY=&gt;IDLE);
<a name="126"><q-n>     126  </q-n></a>                      <q-w>bins</q-w> busy_nonseq = (BUSY=&gt;NONSEQ);
<a name="127"><q-n>     127  </q-n></a>                      <q-w>bins</q-w> busy_seq = (BUSY=&gt;SEQ);
<a name="128"><q-n>     128  </q-n></a>                    }
<a name="129"><q-n>     129  </q-n></a>    cross_cp_undefined_length_burst_htrans_waited_scenario : <q-w>cross</q-w> undefined_length_hburst_waited_scenario , waited_undefined_trans_change_for_idle_burst <q-w>iff</q-w>(!mas_trans_h.HREADY){
<a name="130"><q-n>     130  </q-n></a>                               }
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a><q-m>/** fixed burst trans change */</q-m>
<a name="133"><q-n>     133  </q-n></a>    fixed_burst_trans_change  : <q-w>coverpoint</q-w> mas_trans_h.htrans_type[0]{
<a name="134"><q-n>     134  </q-n></a>                      <q-w>bins</q-w> fixed_nonseq_idle = (NONSEQ=&gt;IDLE);
<a name="135"><q-n>     135  </q-n></a>                      <q-w>bins</q-w> fixed_nonseq_busy = (NONSEQ=&gt;BUSY);
<a name="136"><q-n>     136  </q-n></a>                      <q-w>bins</q-w> fixed_nonseq_seq = (NONSEQ=&gt;SEQ);
<a name="137"><q-n>     137  </q-n></a>                      <q-w>bins</q-w> fixed_busy_busy = (BUSY=&gt;BUSY);
<a name="138"><q-n>     138  </q-n></a>                      <q-w>bins</q-w> fixed_busy_seq = (BUSY=&gt;SEQ);
<a name="139"><q-n>     139  </q-n></a>                      <q-w>bins</q-w> fixed_busy_idle = (BUSY=&gt;IDLE);
<a name="140"><q-n>     140  </q-n></a>                      <q-w>bins</q-w> fixed_idle_idle = (IDLE=&gt;IDLE);
<a name="141"><q-n>     141  </q-n></a>                      <q-w>bins</q-w> fixed_seq_seq = (SEQ=&gt;SEQ);
<a name="142"><q-n>     142  </q-n></a>                      <q-w>bins</q-w> fixed_seq_idle = (SEQ=&gt;IDLE);
<a name="143"><q-n>     143  </q-n></a>                      <q-w>bins</q-w> fixed_seq_busy = (SEQ=&gt;BUSY);
<a name="144"><q-n>     144  </q-n></a>                  }
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a>    cross_cp_fixed_burst_htrans_without_wait_scenario : <q-w>cross</q-w> fixed_hburst_waited_scenario , fixed_burst_trans_change {
<a name="147"><q-n>     147  </q-n></a>                               }
<a name="148"><q-n>     148  </q-n></a>    
<a name="149"><q-n>     149  </q-n></a><q-m>/** INCR trans change */</q-m>
<a name="150"><q-n>     150  </q-n></a>    cross_cp_incr_burst_nonseq_to_any_without_wait_scenario : <q-w>cross</q-w> undefined_length_hburst_waited_scenario , fixed_burst_trans_change {
<a name="151"><q-n>     151  </q-n></a>                               }
<a name="152"><q-n>     152  </q-n></a>
<a name="153"><q-n>     153  </q-n></a><q-m>/** all signals cross bins*/</q-m>
<a name="154"><q-n>     154  </q-n></a>    single_hsize_hwrite_htrans_cross_cp : <q-w>cross</q-w> mas_hburst_state,mas_hsize,hwrite_range,htrans_nonseq_state{
<a name="155"><q-n>     155  </q-n></a>                              
<a name="156"><q-n>     156  </q-n></a>               <q-w>bins</q-w> cross_single_burst_any_size_wr_rd_nonseq = <q-w>binsof</q-w>(mas_hburst_state.single_burst_operation) &amp;&amp; <q-w>binsof</q-w>(mas_hsize) &amp;&amp; <q-w>binsof</q-w>(hwrite_range) &amp;&amp; <q-w>binsof</q-w>(htrans_nonseq_state);
<a name="157"><q-n>     157  </q-n></a>
<a name="158"><q-n>     158  </q-n></a>                          }
<a name="159"><q-n>     159  </q-n></a>
<a name="160"><q-n>     160  </q-n></a>    fixed_hsize_hwrite_htrans_cross_cp : <q-w>cross</q-w> fixed_hburst_waited_scenario , mas_hsize , hwrite_range , htrans_state{
<a name="161"><q-n>     161  </q-n></a>    }
<a name="162"><q-n>     162  </q-n></a>    
<a name="163"><q-n>     163  </q-n></a>    undefined_hsize_hwrite_htrans_cross_cp : <q-w>cross</q-w> undefined_length_hburst_waited_scenario , mas_hsize , hwrite_range , htrans_state{
<a name="164"><q-n>     164  </q-n></a>    }
<a name="165"><q-n>     165  </q-n></a>  <q-w>endgroup</q-w>
<a name="166"><q-n>     166  </q-n></a>
<a name="167"><q-n>     167  </q-n></a>
<a name="168"><q-n>     168  </q-n></a>  <q-m>//-------Covergroup-----Slave side-------------------------</q-m>
<a name="169"><q-n>     169  </q-n></a>  <q-w>covergroup</q-w> cvg_slv_data <q-w>with</q-w> <q-w>function</q-w> sample(ahb_slv_trans slv_trans_h,<q-w>bit</q-w> c);
<a name="170"><q-n>     170  </q-n></a>    slv_hrdata : <q-w>coverpoint</q-w> c{
<a name="171"><q-n>     171  </q-n></a>                   <q-w>bins</q-w> slv_rd_data_transition_0_to_1=(0=&gt;1);
<a name="172"><q-n>     172  </q-n></a>                   <q-w>bins</q-w> slv_rd_data_transition_1_to_0=(1=&gt;0);
<a name="173"><q-n>     173  </q-n></a>                 }
<a name="174"><q-n>     174  </q-n></a>  <q-w>endgroup</q-w>
<a name="175"><q-n>     175  </q-n></a>
<a name="176"><q-n>     176  </q-n></a>  <q-w>covergroup</q-w> cvg_slv_signal <q-w>with</q-w> <q-w>function</q-w> sample(ahb_slv_trans slv_trans_h);
<a name="177"><q-n>     177  </q-n></a>    slv_hready_transition : <q-w>coverpoint</q-w> slv_trans_h.HREADYOUT{
<a name="178"><q-n>     178  </q-n></a>                   <q-w>bins</q-w> readyout_transiton_0_to_1=(0=&gt;1);
<a name="179"><q-n>     179  </q-n></a>                   <q-w>bins</q-w> readyout_transition_1_to_0=(1=&gt;0);
<a name="180"><q-n>     180  </q-n></a>                 }
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a>   <q-m>//--need optimization for calculating wait cycle.</q-m>
<a name="183"><q-n>     183  </q-n></a>    slv_hready_consecutive : <q-w>coverpoint</q-w> slv_trans_h.HREADYOUT{
<a name="184"><q-n>     184  </q-n></a>                   <q-w>bins</q-w> hreadyout_consecutive_0[] = (0[*16]);
<a name="185"><q-n>     185  </q-n></a>               }
<a name="186"><q-n>     186  </q-n></a>
<a name="187"><q-n>     187  </q-n></a>    slv_hresp_state  : <q-w>coverpoint</q-w> slv_trans_h.hresp_type{
<a name="188"><q-n>     188  </q-n></a>                   <q-w>bins</q-w> response_state[]={OKAY,ERROR};
<a name="189"><q-n>     189  </q-n></a>
<a name="190"><q-n>     190  </q-n></a>                  <q-m>/** Transition bins for check weather transfer continues</q-m>
<a name="191"><q-n>     191  </q-n></a><q-m>                  * after error reponse or not*/</q-m>
<a name="192"><q-n>     192  </q-n></a>                   <q-w>bins</q-w> transition_error_to_okay = (ERROR=&gt;OKAY);
<a name="193"><q-n>     193  </q-n></a>                  <q-m>// bins transition_error_to_error = (ERROR=&gt;ERROR);</q-m>
<a name="194"><q-n>     194  </q-n></a>                   <q-w>bins</q-w> transition_okay_to_okay = (OKAY=&gt;OKAY);
<a name="195"><q-n>     195  </q-n></a>                   <q-w>bins</q-w> transition_okay_to_error = (OKAY=&gt;ERROR);
<a name="196"><q-n>     196  </q-n></a>
<a name="197"><q-n>     197  </q-n></a>                 }
<a name="198"><q-n>     198  </q-n></a>
<a name="199"><q-n>     199  </q-n></a>   <q-m>/** New bins as per VIP coverage*/</q-m>
<a name="200"><q-n>     200  </q-n></a>    slv_hwrite_state : <q-w>coverpoint</q-w> slv_trans_h.HWRITE{
<a name="201"><q-n>     201  </q-n></a>                       <q-w>bins</q-w> slv_hwrite_state []={0,1};
<a name="202"><q-n>     202  </q-n></a>                   }
<a name="203"><q-n>     203  </q-n></a>
<a name="204"><q-n>     204  </q-n></a>    slv_hburst_state : <q-w>coverpoint</q-w> slv_trans_h.hburst_type{
<a name="205"><q-n>     205  </q-n></a>                         <q-w>bins</q-w> single_burst_operation = {SINGLE};
<a name="206"><q-n>     206  </q-n></a>                         <q-w>bins</q-w> incr_burst_operation = {INCR};
<a name="207"><q-n>     207  </q-n></a>                         <q-w>bins</q-w> incr4_burst_operation = {INCR4};
<a name="208"><q-n>     208  </q-n></a>                         <q-w>bins</q-w> incr8_burst_operation = {INCR8};
<a name="209"><q-n>     209  </q-n></a>                         <q-w>bins</q-w> incr16_burst_operation = {INCR16};
<a name="210"><q-n>     210  </q-n></a>                         <q-w>bins</q-w> wrap4_burst_operation = {WRAP4};
<a name="211"><q-n>     211  </q-n></a>                         <q-w>bins</q-w> wrap8_burst_operation = {WRAP8};
<a name="212"><q-n>     212  </q-n></a>                         <q-w>bins</q-w> wrap16_burst_operation = {WRAP16};
<a name="213"><q-n>     213  </q-n></a>                       }
<a name="214"><q-n>     214  </q-n></a>
<a name="215"><q-n>     215  </q-n></a>    cross_cp_response_burst_wr_rd : <q-w>cross</q-w> slv_hwrite_state,slv_hburst_state,slv_hresp_state {
<a name="216"><q-n>     216  </q-n></a>                                      <q-w>bins</q-w> hwrite_hburst_hresp= <q-w>binsof</q-w>(slv_hburst_state) &amp;&amp; <q-w>binsof</q-w>(slv_hwrite_state) &amp;&amp; <q-w>binsof</q-w>(slv_hresp_state.response_state);
<a name="217"><q-n>     217  </q-n></a>                                    }
<a name="218"><q-n>     218  </q-n></a>    
<a name="219"><q-n>     219  </q-n></a>
<a name="220"><q-n>     220  </q-n></a>  <q-w>endgroup</q-w>
<a name="221"><q-n>     221  </q-n></a>
<a name="222"><q-n>     222  </q-n></a><q-w>class</q-w> ahb_cc <q-w>extends</q-w> uvm_component;
<a name="223"><q-n>     223  </q-n></a>
<a name="224"><q-n>     224  </q-n></a><q-m>/*covergroup wait_cycle @(vif.hclk);</q-m>
<a name="225"><q-n>     225  </q-n></a><q-m>  hreadyout_wait_cycle : coverpoint vif.slv_if.HREADY{</q-m>
<a name="226"><q-n>     226  </q-n></a><q-m>            bins consecutive_wait_cycle = (0[*16]);</q-m>
<a name="227"><q-n>     227  </q-n></a><q-m>        }</q-m>
<a name="228"><q-n>     228  </q-n></a><q-m>endgroup*/</q-m>
<a name="229"><q-n>     229  </q-n></a>  <q-m>//factory registration</q-m>
<a name="230"><q-n>     230  </q-n></a>
<a name="231"><q-n>     231  </q-n></a>  `uvm_component_utils(ahb_cc)
<a name="232"><q-n>     232  </q-n></a>
<a name="233"><q-n>     233  </q-n></a>  `uvm_analysis_imp_decl (_mas)
<a name="234"><q-n>     234  </q-n></a>  `uvm_analysis_imp_decl (_slv)
<a name="235"><q-n>     235  </q-n></a> 
<a name="236"><q-n>     236  </q-n></a>   cvg_mas_data data_h[];
<a name="237"><q-n>     237  </q-n></a>   cvg_32_bit_aligned_addr addr_handle;
<a name="238"><q-n>     238  </q-n></a>   cvg_64_bit_aligned_addr addr_h;
<a name="239"><q-n>     239  </q-n></a>
<a name="240"><q-n>     240  </q-n></a>
<a name="241"><q-n>     241  </q-n></a>   cvg_mas_all_signals mas_signal_h;
<a name="242"><q-n>     242  </q-n></a>   cvg_slv_data slv_data_h[`DATA_WIDTH];
<a name="243"><q-n>     243  </q-n></a>   cvg_slv_signal slv_signal_h;
<a name="244"><q-n>     244  </q-n></a>
<a name="245"><q-n>     245  </q-n></a>  <q-m>//analysis import for receiving data from monitor for coverage</q-m>
<a name="246"><q-n>     246  </q-n></a>
<a name="247"><q-n>     247  </q-n></a>  uvm_analysis_imp_mas #(ahb_mas_trans,ahb_cc) mas_ai_cc;
<a name="248"><q-n>     248  </q-n></a>  uvm_analysis_imp_slv #(ahb_slv_trans,ahb_cc) slv_ai_cc;
<a name="249"><q-n>     249  </q-n></a>  
<a name="250"><q-n>     250  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_cc"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="251"><q-n>     251  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> write_mas(ahb_mas_trans mas_trans_h);
<a name="252"><q-n>     252  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> write_slv(ahb_slv_trans slv_trans_h);
<a name="253"><q-n>     253  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>void</q-w> report_phase(uvm_phase phase);
<a name="254"><q-n>     254  </q-n></a> 
<a name="255"><q-n>     255  </q-n></a><q-w>endclass</q-w> : ahb_cc
<a name="256"><q-n>     256  </q-n></a>
<a name="257"><q-n>     257  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="258"><q-n>     258  </q-n></a><q-m>//methods</q-m>
<a name="259"><q-n>     259  </q-n></a><q-m>//*****************************************************************************</q-m>
<a name="260"><q-n>     260  </q-n></a>
<a name="261"><q-n>     261  </q-n></a><q-m>//new function</q-m>
<a name="262"><q-n>     262  </q-n></a>
<a name="263"><q-n>     263  </q-n></a><q-w>function</q-w> ahb_cc::<q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"ahb_cc"</q-l>,uvm_component parent=<q-w>null</q-w>);
<a name="264"><q-n>     264  </q-n></a>
<a name="265"><q-n>     265  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name,parent);
<a name="266"><q-n>     266  </q-n></a>  mas_ai_cc = <q-w>new</q-w>(<q-l>"mas_ai_cc"</q-l>,<q-w>this</q-w>);
<a name="267"><q-n>     267  </q-n></a>  slv_ai_cc = <q-w>new</q-w>(<q-l>"slv_ai_cc"</q-l>,<q-w>this</q-w>);
<a name="268"><q-n>     268  </q-n></a>  
<a name="269"><q-n>     269  </q-n></a>
<a name="270"><q-n>     270  </q-n></a>  <q-w>if</q-w>(`ADDR_WIDTH==32)
<a name="271"><q-n>     271  </q-n></a>    addr_handle=<q-w>new</q-w>();
<a name="272"><q-n>     272  </q-n></a>  <q-w>if</q-w>(`ADDR_WIDTH==64)
<a name="273"><q-n>     273  </q-n></a>    addr_h=<q-w>new</q-w>();
<a name="274"><q-n>     274  </q-n></a>
<a name="275"><q-n>     275  </q-n></a> <q-m>// wait_cycle =new();</q-m>
<a name="276"><q-n>     276  </q-n></a>  data_h=<q-w>new</q-w>[`DATA_WIDTH];
<a name="277"><q-n>     277  </q-n></a> <q-m>//--master covergroup handle</q-m>
<a name="278"><q-n>     278  </q-n></a> <q-w>foreach</q-w>(data_h[i])
<a name="279"><q-n>     279  </q-n></a>   data_h[i]=<q-w>new</q-w>();
<a name="280"><q-n>     280  </q-n></a>
<a name="281"><q-n>     281  </q-n></a> mas_signal_h=<q-w>new</q-w>();
<a name="282"><q-n>     282  </q-n></a>  <q-m>//--slave covergroup handle.</q-m>
<a name="283"><q-n>     283  </q-n></a> <q-w>for</q-w>(<q-w>int</q-w> i=0;i&lt;`DATA_WIDTH;i++) <q-w>begin</q-w>
<a name="284"><q-n>     284  </q-n></a>    slv_data_h[i]=<q-w>new</q-w>();
<a name="285"><q-n>     285  </q-n></a> <q-w>end</q-w>
<a name="286"><q-n>     286  </q-n></a> slv_signal_h=<q-w>new</q-w>();
<a name="287"><q-n>     287  </q-n></a>
<a name="288"><q-n>     288  </q-n></a><q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="289"><q-n>     289  </q-n></a>
<a name="290"><q-n>     290  </q-n></a><q-m>//master write method</q-m>
<a name="291"><q-n>     291  </q-n></a>
<a name="292"><q-n>     292  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_cc::write_mas(ahb_mas_trans mas_trans_h);
<a name="293"><q-n>     293  </q-n></a>
<a name="294"><q-n>     294  </q-n></a>  <q-w>for</q-w>(<q-w>int</q-w> j=0;j&lt;`DATA_WIDTH;j++) <q-w>begin</q-w>
<a name="295"><q-n>     295  </q-n></a>    data_h[j].sample(mas_trans_h,mas_trans_h.HWDATA[0][j]);        
<a name="296"><q-n>     296  </q-n></a>  <q-w>end</q-w>
<a name="297"><q-n>     297  </q-n></a>  
<a name="298"><q-n>     298  </q-n></a>  mas_signal_h.sample(mas_trans_h);  
<a name="299"><q-n>     299  </q-n></a>  
<a name="300"><q-n>     300  </q-n></a>  <q-w>if</q-w>(`ADDR_WIDTH==32)
<a name="301"><q-n>     301  </q-n></a>    addr_handle.sample(mas_trans_h);
<a name="302"><q-n>     302  </q-n></a>  <q-w>if</q-w>(`ADDR_WIDTH==64)
<a name="303"><q-n>     303  </q-n></a>    addr_h.sample(mas_trans_h);
<a name="304"><q-n>     304  </q-n></a><q-w>endfunction</q-w> : write_mas
<a name="305"><q-n>     305  </q-n></a>
<a name="306"><q-n>     306  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_cc::write_slv(ahb_slv_trans slv_trans_h);
<a name="307"><q-n>     307  </q-n></a>
<a name="308"><q-n>     308  </q-n></a>  <q-w>for</q-w>(<q-w>int</q-w> k=0;k&lt;`DATA_WIDTH;k++) <q-w>begin</q-w>
<a name="309"><q-n>     309  </q-n></a>    slv_data_h[k].sample(slv_trans_h,slv_trans_h.HRDATA[k]);
<a name="310"><q-n>     310  </q-n></a>  <q-w>end</q-w>
<a name="311"><q-n>     311  </q-n></a>  
<a name="312"><q-n>     312  </q-n></a>  slv_signal_h.sample(slv_trans_h);
<a name="313"><q-n>     313  </q-n></a>
<a name="314"><q-n>     314  </q-n></a><q-w>endfunction</q-w> : write_slv
<a name="315"><q-n>     315  </q-n></a>
<a name="316"><q-n>     316  </q-n></a><q-w>function</q-w> <q-w>void</q-w> ahb_cc :: report_phase(uvm_phase phase);
<a name="317"><q-n>     317  </q-n></a>  `uvm_info(get_type_name(),$sformatf(<q-l>"Total coverage======%f"</q-l>,$get_coverage),UVM_LOW)
<a name="318"><q-n>     318  </q-n></a><q-w>endfunction</q-w>
<a name="319"><q-n>     319  </q-n></a>
<a name="320"><q-n>     320  </q-n></a>
<a name="321"><q-n>     321  </q-n></a>
<a name="322"><q-n>     322  </q-n></a>
</pre>
</tt>

  
</body>
</html>
